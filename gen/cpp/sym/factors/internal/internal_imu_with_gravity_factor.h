// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * An internal helper function to linearize the difference between the orientation, velocity, and
 * position at one time step and those of another time step. The expected difference is calculated
 * from the preintegrated IMU measurements between those time steps.
 *
 * NOTE: If you are looking for a residual for an IMU factor, do not use this. Instead use
 * the one found in ``symforce/slam/imu_preintegration/imu_factor.h``.
 *
 * Time step i is the time of the first IMU measurement of the interval.
 * Time step j is the time after the last IMU measurement of the interval.
 *
 * Assumes sqrt_info is lower triangular and only reads the lower triangle.
 *
 * Args:
 *     pose_i: Pose at time step i (world_T_body)
 *     vel_i: Velocity at time step i (world frame)
 *     pose_j: Pose at time step j (world_T_body)
 *     vel_j: Velocity at time step j (world frame)
 *     accel_bias_i: The accelerometer bias between timesteps i and j
 *     gyro_bias_i: The gyroscope bias between timesteps i and j
 *     DR: Preintegrated estimate for pose_i.R.inverse() * pose_j.R
 *     Dv: Preintegrated estimate for vel_j - vel_i in the body frame at timestep i
 *     Dp: Preintegrated estimate for position change (before velocity and gravity corrections) in
 *         the body frame at timestep i::
 *
 *             R_i^T (p_j - p_i - v_i Delta t - 1/2 g Delta t^2),
 *             where R_i = pose_i.R, p_i = pose_i.t, p_j = pose_j.t, and v_i = vel_i
 *     sqrt_info: sqrt info matrix of DR('s tangent space), Dv, Dp
 *     DR_D_gyro_bias: Derivative of DR w.r.t. gyro_bias evaluated at gyro_bias_hat
 *     Dv_D_accel_bias: Derivative of Dv w.r.t. accel_bias evaluated at accel_bias_hat
 *     Dv_D_gyro_bias: Derivative of Dv w.r.t. gyro_bias evaluated at gyro_bias_hat
 *     Dp_D_accel_bias: Derivative of Dp w.r.t. accel_bias evaluated at accel_bias_hat
 *     Dp_D_gyro_bias: Derivative of Dp w.r.t. gyro_bias evaluated at gyro_bias_hat
 *     accel_bias_hat: The accelerometer bias used during preintegration
 *     gyro_bias_hat: The gyroscope bias used during preintegration
 *     gravity: Acceleration due to gravity (in the same frame as pose_x and vel_x), i.e., the
 *         vector which when added to the accelerometer measurements gives the true acceleration
 *         (up to bias and noise) of the IMU.
 *     dt: The time between timestep i and j: t_j - t_i
 *     epsilon: epsilon used for numerical stability
 *
 * Outputs:
 *     res: 9dof product residual between the orientations, then velocities, then positions.
 *     jacobian: (9x27) jacobian of res wrt args pose_i (6), vel_i (3), pose_j (6), vel_j (3),
 *               accel_bias_i (3), gyro_bias_i (3), gravity (3)
 *     hessian: (27x27) Gauss-Newton hessian for args pose_i (6), vel_i (3), pose_j (6), vel_j (3),
 *              accel_bias_i (3), gyro_bias_i (3), gravity (3)
 *     rhs: (27x1) Gauss-Newton rhs for args pose_i (6), vel_i (3), pose_j (6), vel_j (3),
 *          accel_bias_i (3), gyro_bias_i (3), gravity (3)
 */
template <typename Scalar>
void InternalImuWithGravityFactor(
    const sym::Pose3<Scalar>& pose_i, const Eigen::Matrix<Scalar, 3, 1>& vel_i,
    const sym::Pose3<Scalar>& pose_j, const Eigen::Matrix<Scalar, 3, 1>& vel_j,
    const Eigen::Matrix<Scalar, 3, 1>& accel_bias_i, const Eigen::Matrix<Scalar, 3, 1>& gyro_bias_i,
    const sym::Rot3<Scalar>& DR, const Eigen::Matrix<Scalar, 3, 1>& Dv,
    const Eigen::Matrix<Scalar, 3, 1>& Dp, const Eigen::Matrix<Scalar, 9, 9>& sqrt_info,
    const Eigen::Matrix<Scalar, 3, 3>& DR_D_gyro_bias,
    const Eigen::Matrix<Scalar, 3, 3>& Dv_D_accel_bias,
    const Eigen::Matrix<Scalar, 3, 3>& Dv_D_gyro_bias,
    const Eigen::Matrix<Scalar, 3, 3>& Dp_D_accel_bias,
    const Eigen::Matrix<Scalar, 3, 3>& Dp_D_gyro_bias,
    const Eigen::Matrix<Scalar, 3, 1>& accel_bias_hat,
    const Eigen::Matrix<Scalar, 3, 1>& gyro_bias_hat, const Eigen::Matrix<Scalar, 3, 1>& gravity,
    const Scalar dt, const Scalar epsilon, Eigen::Matrix<Scalar, 9, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 9, 27>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 27, 27>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 27, 1>* const rhs = nullptr) {
  // Total ops: 6835

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _pose_i = pose_i.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _pose_j = pose_j.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _DR = DR.Data();

  // Intermediate terms (796)
  const Scalar _tmp0 = -gyro_bias_hat(0, 0) + gyro_bias_i(0, 0);
  const Scalar _tmp1 = -gyro_bias_hat(2, 0) + gyro_bias_i(2, 0);
  const Scalar _tmp2 = -gyro_bias_hat(1, 0) + gyro_bias_i(1, 0);
  const Scalar _tmp3 =
      DR_D_gyro_bias(0, 0) * _tmp0 + DR_D_gyro_bias(0, 1) * _tmp2 + DR_D_gyro_bias(0, 2) * _tmp1;
  const Scalar _tmp4 =
      DR_D_gyro_bias(1, 0) * _tmp0 + DR_D_gyro_bias(1, 1) * _tmp2 + DR_D_gyro_bias(1, 2) * _tmp1;
  const Scalar _tmp5 =
      DR_D_gyro_bias(2, 0) * _tmp0 + DR_D_gyro_bias(2, 1) * _tmp2 + DR_D_gyro_bias(2, 2) * _tmp1;
  const Scalar _tmp6 = std::pow(_tmp3, Scalar(2)) + std::pow(_tmp4, Scalar(2)) +
                       std::pow(_tmp5, Scalar(2)) + std::pow(epsilon, Scalar(2));
  const Scalar _tmp7 = std::sqrt(_tmp6);
  const Scalar _tmp8 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp9 = std::cos(_tmp8);
  const Scalar _tmp10 = _DR[3] * _tmp9;
  const Scalar _tmp11 = std::sin(_tmp8);
  const Scalar _tmp12 = _tmp11 / _tmp7;
  const Scalar _tmp13 = _DR[1] * _tmp12;
  const Scalar _tmp14 = _DR[0] * _tmp12;
  const Scalar _tmp15 = _DR[2] * _tmp12;
  const Scalar _tmp16 = _tmp10 - _tmp13 * _tmp4 - _tmp14 * _tmp3 - _tmp15 * _tmp5;
  const Scalar _tmp17 = _pose_i[3] * _tmp16;
  const Scalar _tmp18 = _DR[3] * _tmp12;
  const Scalar _tmp19 = _DR[1] * _tmp9;
  const Scalar _tmp20 = -_tmp14 * _tmp5 + _tmp15 * _tmp3 + _tmp18 * _tmp4 + _tmp19;
  const Scalar _tmp21 = _pose_i[1] * _tmp20;
  const Scalar _tmp22 = _DR[0] * _tmp9;
  const Scalar _tmp23 = _tmp13 * _tmp5 - _tmp15 * _tmp4 + _tmp18 * _tmp3 + _tmp22;
  const Scalar _tmp24 = _pose_i[0] * _tmp23;
  const Scalar _tmp25 = _DR[2] * _tmp9;
  const Scalar _tmp26 = -_tmp13 * _tmp3 + _tmp14 * _tmp4 + _tmp18 * _tmp5 + _tmp25;
  const Scalar _tmp27 = _pose_i[2] * _tmp26;
  const Scalar _tmp28 = _tmp17 - _tmp21 - _tmp24 - _tmp27;
  const Scalar _tmp29 = _pose_j[0] * _tmp28;
  const Scalar _tmp30 = _pose_i[3] * _tmp20;
  const Scalar _tmp31 = _pose_i[2] * _tmp23;
  const Scalar _tmp32 = _pose_i[0] * _tmp26;
  const Scalar _tmp33 = _pose_i[1] * _tmp16;
  const Scalar _tmp34 = -_tmp30 - _tmp31 + _tmp32 - _tmp33;
  const Scalar _tmp35 = _pose_j[2] * _tmp34;
  const Scalar _tmp36 = _pose_i[0] * _tmp20;
  const Scalar _tmp37 = _pose_i[1] * _tmp23;
  const Scalar _tmp38 = _pose_i[3] * _tmp26;
  const Scalar _tmp39 = _pose_i[2] * _tmp16;
  const Scalar _tmp40 = -_tmp36 + _tmp37 - _tmp38 - _tmp39;
  const Scalar _tmp41 = _pose_j[1] * _tmp40;
  const Scalar _tmp42 = _pose_i[2] * _tmp20;
  const Scalar _tmp43 = _pose_i[3] * _tmp23;
  const Scalar _tmp44 = _pose_i[1] * _tmp26;
  const Scalar _tmp45 = _pose_i[0] * _tmp16;
  const Scalar _tmp46 = _tmp42 - _tmp43 - _tmp44 - _tmp45;
  const Scalar _tmp47 = _pose_j[3] * _tmp46;
  const Scalar _tmp48 = _tmp29 + _tmp35 - _tmp41 + _tmp47;
  const Scalar _tmp49 = _pose_j[1] * _tmp34;
  const Scalar _tmp50 = _pose_j[2] * _tmp40;
  const Scalar _tmp51 = _pose_j[0] * _tmp46;
  const Scalar _tmp52 = _tmp49 + _tmp50 + _tmp51;
  const Scalar _tmp53 = _pose_j[3] * _tmp28;
  const Scalar _tmp54 = std::copysign(Scalar(1.0), -_tmp52 + _tmp53);
  const Scalar _tmp55 = 2 * _tmp54;
  const Scalar _tmp56 = -_tmp53;
  const Scalar _tmp57 = 1 - epsilon;
  const Scalar _tmp58 = std::min<Scalar>(_tmp57, std::fabs(_tmp52 + _tmp56));
  const Scalar _tmp59 = std::acos(_tmp58) / std::sqrt(Scalar(1 - std::pow(_tmp58, Scalar(2))));
  const Scalar _tmp60 = _tmp55 * _tmp59;
  const Scalar _tmp61 = _tmp48 * _tmp60;
  const Scalar _tmp62 = _tmp61 * sqrt_info(0, 0);
  const Scalar _tmp63 = _pose_j[1] * _tmp28;
  const Scalar _tmp64 = _pose_j[3] * _tmp34;
  const Scalar _tmp65 = _pose_j[0] * _tmp40;
  const Scalar _tmp66 = _pose_j[2] * _tmp46;
  const Scalar _tmp67 = _tmp63 + _tmp64 + _tmp65 - _tmp66;
  const Scalar _tmp68 = _tmp60 * _tmp67;
  const Scalar _tmp69 = _tmp61 * sqrt_info(1, 0) + _tmp68 * sqrt_info(1, 1);
  const Scalar _tmp70 = _pose_j[2] * _tmp28;
  const Scalar _tmp71 = _pose_j[0] * _tmp34;
  const Scalar _tmp72 = _pose_j[3] * _tmp40;
  const Scalar _tmp73 = _pose_j[1] * _tmp46;
  const Scalar _tmp74 = _tmp70 - _tmp71 + _tmp72 + _tmp73;
  const Scalar _tmp75 = _tmp60 * _tmp74;
  const Scalar _tmp76 = _tmp55 * sqrt_info(2, 0);
  const Scalar _tmp77 =
      _tmp48 * _tmp59 * _tmp76 + _tmp68 * sqrt_info(2, 1) + _tmp75 * sqrt_info(2, 2);
  const Scalar _tmp78 = std::pow(_pose_i[1], Scalar(2));
  const Scalar _tmp79 = -2 * _tmp78;
  const Scalar _tmp80 = std::pow(_pose_i[2], Scalar(2));
  const Scalar _tmp81 = 1 - 2 * _tmp80;
  const Scalar _tmp82 = _tmp79 + _tmp81;
  const Scalar _tmp83 = -dt * gravity(0, 0) - vel_i(0, 0) + vel_j(0, 0);
  const Scalar _tmp84 = -accel_bias_hat(1, 0) + accel_bias_i(1, 0);
  const Scalar _tmp85 = -accel_bias_hat(2, 0) + accel_bias_i(2, 0);
  const Scalar _tmp86 = -accel_bias_hat(0, 0) + accel_bias_i(0, 0);
  const Scalar _tmp87 = 2 * _pose_i[1];
  const Scalar _tmp88 = _pose_i[3] * _tmp87;
  const Scalar _tmp89 = -_tmp88;
  const Scalar _tmp90 = 2 * _pose_i[2];
  const Scalar _tmp91 = _pose_i[0] * _tmp90;
  const Scalar _tmp92 = _tmp89 + _tmp91;
  const Scalar _tmp93 = -dt * gravity(2, 0) - vel_i(2, 0) + vel_j(2, 0);
  const Scalar _tmp94 = _pose_i[3] * _tmp90;
  const Scalar _tmp95 = _pose_i[0] * _tmp87;
  const Scalar _tmp96 = _tmp94 + _tmp95;
  const Scalar _tmp97 = -dt * gravity(1, 0) - vel_i(1, 0) + vel_j(1, 0);
  const Scalar _tmp98 = _tmp92 * _tmp93 + _tmp96 * _tmp97;
  const Scalar _tmp99 = -Dv(0, 0) - Dv_D_accel_bias(0, 0) * _tmp86 -
                        Dv_D_accel_bias(0, 1) * _tmp84 - Dv_D_accel_bias(0, 2) * _tmp85 -
                        Dv_D_gyro_bias(0, 0) * _tmp0 - Dv_D_gyro_bias(0, 1) * _tmp2 -
                        Dv_D_gyro_bias(0, 2) * _tmp1 + _tmp82 * _tmp83 + _tmp98;
  const Scalar _tmp100 = _tmp61 * sqrt_info(3, 0) + _tmp68 * sqrt_info(3, 1) +
                         _tmp75 * sqrt_info(3, 2) + _tmp99 * sqrt_info(3, 3);
  const Scalar _tmp101 = std::pow(_pose_i[0], Scalar(2));
  const Scalar _tmp102 = -2 * _tmp101;
  const Scalar _tmp103 = _tmp102 + _tmp81;
  const Scalar _tmp104 = -_tmp94;
  const Scalar _tmp105 = _tmp104 + _tmp95;
  const Scalar _tmp106 = 2 * _pose_i[0] * _pose_i[3];
  const Scalar _tmp107 = _pose_i[1] * _tmp90;
  const Scalar _tmp108 = _tmp106 + _tmp107;
  const Scalar _tmp109 = _tmp105 * _tmp83 + _tmp108 * _tmp93;
  const Scalar _tmp110 = -Dv(1, 0) - Dv_D_accel_bias(1, 0) * _tmp86 -
                         Dv_D_accel_bias(1, 1) * _tmp84 - Dv_D_accel_bias(1, 2) * _tmp85 -
                         Dv_D_gyro_bias(1, 0) * _tmp0 - Dv_D_gyro_bias(1, 1) * _tmp2 -
                         Dv_D_gyro_bias(1, 2) * _tmp1 + _tmp103 * _tmp97 + _tmp109;
  const Scalar _tmp111 = _tmp110 * sqrt_info(4, 4) + _tmp61 * sqrt_info(4, 0) +
                         _tmp68 * sqrt_info(4, 1) + _tmp75 * sqrt_info(4, 2) +
                         _tmp99 * sqrt_info(4, 3);
  const Scalar _tmp112 = _tmp102 + _tmp79 + 1;
  const Scalar _tmp113 = _tmp88 + _tmp91;
  const Scalar _tmp114 = -_tmp106;
  const Scalar _tmp115 = _tmp107 + _tmp114;
  const Scalar _tmp116 = _tmp113 * _tmp83 + _tmp115 * _tmp97;
  const Scalar _tmp117 = -Dv(2, 0) - Dv_D_accel_bias(2, 0) * _tmp86 -
                         Dv_D_accel_bias(2, 1) * _tmp84 - Dv_D_accel_bias(2, 2) * _tmp85 -
                         Dv_D_gyro_bias(2, 0) * _tmp0 - Dv_D_gyro_bias(2, 1) * _tmp2 -
                         Dv_D_gyro_bias(2, 2) * _tmp1 + _tmp112 * _tmp93 + _tmp116;
  const Scalar _tmp118 = _tmp110 * sqrt_info(5, 4) + _tmp117 * sqrt_info(5, 5) +
                         _tmp61 * sqrt_info(5, 0) + _tmp68 * sqrt_info(5, 1) +
                         _tmp75 * sqrt_info(5, 2) + _tmp99 * sqrt_info(5, 3);
  const Scalar _tmp119 = std::pow(dt, Scalar(2));
  const Scalar _tmp120 = (Scalar(1) / Scalar(2)) * _tmp119;
  const Scalar _tmp121 = -_pose_i[4] + _pose_j[4] - _tmp120 * gravity(0, 0) - dt * vel_i(0, 0);
  const Scalar _tmp122 = -_pose_i[6] + _pose_j[6] - _tmp120 * gravity(2, 0) - dt * vel_i(2, 0);
  const Scalar _tmp123 = -_pose_i[5] + _pose_j[5] - _tmp120 * gravity(1, 0) - dt * vel_i(1, 0);
  const Scalar _tmp124 = _tmp122 * _tmp92 + _tmp123 * _tmp96;
  const Scalar _tmp125 = -Dp(0, 0) - Dp_D_accel_bias(0, 0) * _tmp86 -
                         Dp_D_accel_bias(0, 1) * _tmp84 - Dp_D_accel_bias(0, 2) * _tmp85 -
                         Dp_D_gyro_bias(0, 0) * _tmp0 - Dp_D_gyro_bias(0, 1) * _tmp2 -
                         Dp_D_gyro_bias(0, 2) * _tmp1 + _tmp121 * _tmp82 + _tmp124;
  const Scalar _tmp126 = _tmp110 * sqrt_info(6, 4) + _tmp117 * sqrt_info(6, 5) +
                         _tmp125 * sqrt_info(6, 6) + _tmp61 * sqrt_info(6, 0) +
                         _tmp68 * sqrt_info(6, 1) + _tmp75 * sqrt_info(6, 2) +
                         _tmp99 * sqrt_info(6, 3);
  const Scalar _tmp127 = _tmp74 * sqrt_info(7, 2);
  const Scalar _tmp128 = _tmp105 * _tmp121 + _tmp108 * _tmp122;
  const Scalar _tmp129 = -Dp(1, 0) - Dp_D_accel_bias(1, 0) * _tmp86 -
                         Dp_D_accel_bias(1, 1) * _tmp84 - Dp_D_accel_bias(1, 2) * _tmp85 -
                         Dp_D_gyro_bias(1, 0) * _tmp0 - Dp_D_gyro_bias(1, 1) * _tmp2 -
                         Dp_D_gyro_bias(1, 2) * _tmp1 + _tmp103 * _tmp123 + _tmp128;
  const Scalar _tmp130 = _tmp110 * sqrt_info(7, 4) + _tmp117 * sqrt_info(7, 5) +
                         _tmp125 * sqrt_info(7, 6) + _tmp127 * _tmp60 + _tmp129 * sqrt_info(7, 7) +
                         _tmp61 * sqrt_info(7, 0) + _tmp68 * sqrt_info(7, 1) +
                         _tmp99 * sqrt_info(7, 3);
  const Scalar _tmp131 = _tmp113 * _tmp121 + _tmp115 * _tmp123;
  const Scalar _tmp132 =
      _tmp110 * sqrt_info(8, 4) + _tmp117 * sqrt_info(8, 5) + _tmp125 * sqrt_info(8, 6) +
      _tmp129 * sqrt_info(8, 7) + _tmp61 * sqrt_info(8, 0) + _tmp68 * sqrt_info(8, 1) +
      _tmp75 * sqrt_info(8, 2) + _tmp99 * sqrt_info(8, 3) +
      sqrt_info(8, 8) * (-Dp(2, 0) - Dp_D_accel_bias(2, 0) * _tmp86 -
                         Dp_D_accel_bias(2, 1) * _tmp84 - Dp_D_accel_bias(2, 2) * _tmp85 -
                         Dp_D_gyro_bias(2, 0) * _tmp0 - Dp_D_gyro_bias(2, 1) * _tmp2 -
                         Dp_D_gyro_bias(2, 2) * _tmp1 + _tmp112 * _tmp122 + _tmp131);
  const Scalar _tmp133 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp134 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp135 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp136 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp137 = _tmp135 - _tmp136;
  const Scalar _tmp138 = _tmp133 + _tmp134 + _tmp137;
  const Scalar _tmp139 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp140 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp141 = -_tmp140;
  const Scalar _tmp142 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp143 = -Scalar(1) / Scalar(2) * _tmp17;
  const Scalar _tmp144 = -_tmp142 + _tmp143;
  const Scalar _tmp145 = _tmp139 + _tmp141 + _tmp144;
  const Scalar _tmp146 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp147 = -_tmp146;
  const Scalar _tmp148 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp149 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp150 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp151 = _tmp149 + _tmp150;
  const Scalar _tmp152 = _tmp147 + _tmp148 + _tmp151;
  const Scalar _tmp153 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp154 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp155 = -_tmp154;
  const Scalar _tmp156 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp157 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp158 = _tmp156 - _tmp157;
  const Scalar _tmp159 = -_tmp153 + _tmp155 + _tmp158;
  const Scalar _tmp160 =
      _pose_j[0] * _tmp159 - _pose_j[1] * _tmp152 + _pose_j[2] * _tmp138 + _pose_j[3] * _tmp145;
  const Scalar _tmp161 = -_tmp49 - _tmp50 - _tmp51 + _tmp53;
  const Scalar _tmp162 = std::fabs(_tmp161);
  const Scalar _tmp163 = std::min<Scalar>(_tmp162, _tmp57);
  const Scalar _tmp164 = std::acos(_tmp163);
  const Scalar _tmp165 = 1 - std::pow(_tmp163, Scalar(2));
  const Scalar _tmp166 = _tmp164 / std::sqrt(_tmp165);
  const Scalar _tmp167 = _tmp166 * _tmp55;
  const Scalar _tmp168 = _tmp160 * _tmp167;
  const Scalar _tmp169 =
      -_pose_j[0] * _tmp145 - _pose_j[1] * _tmp138 - _pose_j[2] * _tmp152 + _pose_j[3] * _tmp159;
  const Scalar _tmp170 = (((_tmp161) > 0) - ((_tmp161) < 0));
  const Scalar _tmp171 = _tmp54 * ((((-_tmp162 + _tmp57) > 0) - ((-_tmp162 + _tmp57) < 0)) + 1);
  const Scalar _tmp172 = _tmp163 * _tmp164 * _tmp171 / (_tmp165 * std::sqrt(_tmp165));
  const Scalar _tmp173 = _tmp170 * _tmp172;
  const Scalar _tmp174 = _tmp169 * _tmp173;
  const Scalar _tmp175 = _tmp48 * sqrt_info(0, 0);
  const Scalar _tmp176 = _tmp171 / _tmp165;
  const Scalar _tmp177 = _tmp170 * _tmp176;
  const Scalar _tmp178 = _tmp169 * _tmp177;
  const Scalar _tmp179 = _tmp178 * _tmp48;
  const Scalar _tmp180 = _tmp168 * sqrt_info(0, 0) + _tmp174 * _tmp175 - _tmp179 * sqrt_info(0, 0);
  const Scalar _tmp181 = _tmp67 * sqrt_info(1, 1);
  const Scalar _tmp182 = _tmp178 * _tmp67;
  const Scalar _tmp183 = _tmp48 * sqrt_info(1, 0);
  const Scalar _tmp184 = _tmp167 * (_pose_j[0] * _tmp152 + _pose_j[1] * _tmp159 -
                                    _pose_j[2] * _tmp145 + _pose_j[3] * _tmp138);
  const Scalar _tmp185 = _tmp168 * sqrt_info(1, 0) + _tmp174 * _tmp181 + _tmp174 * _tmp183 -
                         _tmp179 * sqrt_info(1, 0) - _tmp182 * sqrt_info(1, 1) +
                         _tmp184 * sqrt_info(1, 1);
  const Scalar _tmp186 = _tmp166 * _tmp76;
  const Scalar _tmp187 = _tmp67 * sqrt_info(2, 1);
  const Scalar _tmp188 = _tmp48 * sqrt_info(2, 0);
  const Scalar _tmp189 = _tmp74 * sqrt_info(2, 2);
  const Scalar _tmp190 = _tmp167 * (-_pose_j[0] * _tmp138 + _pose_j[1] * _tmp145 +
                                    _pose_j[2] * _tmp159 + _pose_j[3] * _tmp152);
  const Scalar _tmp191 = _tmp160 * _tmp186 + _tmp174 * _tmp187 + _tmp174 * _tmp188 +
                         _tmp174 * _tmp189 - _tmp178 * _tmp189 - _tmp179 * sqrt_info(2, 0) -
                         _tmp182 * sqrt_info(2, 1) + _tmp184 * sqrt_info(2, 1) +
                         _tmp190 * sqrt_info(2, 2);
  const Scalar _tmp192 = _tmp67 * sqrt_info(3, 1);
  const Scalar _tmp193 = _tmp48 * sqrt_info(3, 0);
  const Scalar _tmp194 = _tmp74 * sqrt_info(3, 2);
  const Scalar _tmp195 = _tmp168 * sqrt_info(3, 0) + _tmp174 * _tmp192 + _tmp174 * _tmp193 +
                         _tmp174 * _tmp194 - _tmp178 * _tmp193 - _tmp178 * _tmp194 -
                         _tmp182 * sqrt_info(3, 1) + _tmp184 * sqrt_info(3, 1) +
                         _tmp190 * sqrt_info(3, 2);
  const Scalar _tmp196 = _tmp67 * sqrt_info(4, 1);
  const Scalar _tmp197 = -_tmp101;
  const Scalar _tmp198 = _tmp197 + _tmp80;
  const Scalar _tmp199 = std::pow(_pose_i[3], Scalar(2));
  const Scalar _tmp200 = -_tmp78;
  const Scalar _tmp201 = _tmp199 + _tmp200;
  const Scalar _tmp202 = _tmp198 + _tmp201;
  const Scalar _tmp203 = _tmp116 + _tmp202 * _tmp93;
  const Scalar _tmp204 = _tmp48 * sqrt_info(4, 0);
  const Scalar _tmp205 = _tmp74 * sqrt_info(4, 2);
  const Scalar _tmp206 = _tmp168 * sqrt_info(4, 0) + _tmp174 * _tmp196 + _tmp174 * _tmp204 +
                         _tmp174 * _tmp205 - _tmp178 * _tmp196 - _tmp178 * _tmp205 -
                         _tmp179 * sqrt_info(4, 0) + _tmp184 * sqrt_info(4, 1) +
                         _tmp190 * sqrt_info(4, 2) + _tmp203 * sqrt_info(4, 4);
  const Scalar _tmp207 = -_tmp95;
  const Scalar _tmp208 = _tmp207 + _tmp94;
  const Scalar _tmp209 = -_tmp107;
  const Scalar _tmp210 = _tmp114 + _tmp209;
  const Scalar _tmp211 = -_tmp199;
  const Scalar _tmp212 = _tmp101 + _tmp200 + _tmp211 + _tmp80;
  const Scalar _tmp213 = _tmp208 * _tmp83 + _tmp210 * _tmp93 + _tmp212 * _tmp97;
  const Scalar _tmp214 = _tmp74 * sqrt_info(5, 2);
  const Scalar _tmp215 = _tmp48 * sqrt_info(5, 0);
  const Scalar _tmp216 = _tmp67 * sqrt_info(5, 1);
  const Scalar _tmp217 = _tmp168 * sqrt_info(5, 0) + _tmp174 * _tmp214 + _tmp174 * _tmp215 +
                         _tmp174 * _tmp216 - _tmp178 * _tmp214 - _tmp178 * _tmp215 -
                         _tmp182 * sqrt_info(5, 1) + _tmp184 * sqrt_info(5, 1) +
                         _tmp190 * sqrt_info(5, 2) + _tmp203 * sqrt_info(5, 4) +
                         _tmp213 * sqrt_info(5, 5);
  const Scalar _tmp218 = _tmp67 * sqrt_info(6, 1);
  const Scalar _tmp219 = _tmp74 * sqrt_info(6, 2);
  const Scalar _tmp220 = _tmp48 * sqrt_info(6, 0);
  const Scalar _tmp221 = _tmp168 * sqrt_info(6, 0) + _tmp174 * _tmp218 + _tmp174 * _tmp219 +
                         _tmp174 * _tmp220 - _tmp178 * _tmp219 - _tmp179 * sqrt_info(6, 0) -
                         _tmp182 * sqrt_info(6, 1) + _tmp184 * sqrt_info(6, 1) +
                         _tmp190 * sqrt_info(6, 2) + _tmp203 * sqrt_info(6, 4) +
                         _tmp213 * sqrt_info(6, 5);
  const Scalar _tmp222 = _tmp67 * sqrt_info(7, 1);
  const Scalar _tmp223 = _tmp48 * sqrt_info(7, 0);
  const Scalar _tmp224 = _tmp122 * _tmp202 + _tmp131;
  const Scalar _tmp225 = _tmp127 * _tmp174 - _tmp127 * _tmp178 + _tmp168 * sqrt_info(7, 0) +
                         _tmp174 * _tmp222 + _tmp174 * _tmp223 - _tmp179 * sqrt_info(7, 0) -
                         _tmp182 * sqrt_info(7, 1) + _tmp184 * sqrt_info(7, 1) +
                         _tmp190 * sqrt_info(7, 2) + _tmp203 * sqrt_info(7, 4) +
                         _tmp213 * sqrt_info(7, 5) + _tmp224 * sqrt_info(7, 7);
  const Scalar _tmp226 = _tmp48 * sqrt_info(8, 0);
  const Scalar _tmp227 = _tmp67 * sqrt_info(8, 1);
  const Scalar _tmp228 = _tmp74 * sqrt_info(8, 2);
  const Scalar _tmp229 =
      _tmp168 * sqrt_info(8, 0) + _tmp174 * _tmp226 + _tmp174 * _tmp227 + _tmp174 * _tmp228 -
      _tmp178 * _tmp226 - _tmp178 * _tmp228 - _tmp182 * sqrt_info(8, 1) +
      _tmp184 * sqrt_info(8, 1) + _tmp190 * sqrt_info(8, 2) + _tmp203 * sqrt_info(8, 4) +
      _tmp213 * sqrt_info(8, 5) + _tmp224 * sqrt_info(8, 7) +
      sqrt_info(8, 8) * (_tmp121 * _tmp208 + _tmp122 * _tmp210 + _tmp123 * _tmp212);
  const Scalar _tmp230 = -_tmp134;
  const Scalar _tmp231 = _tmp133 + _tmp135 + _tmp136 + _tmp230;
  const Scalar _tmp232 = -_tmp139;
  const Scalar _tmp233 = _tmp141 + _tmp142 + _tmp143 + _tmp232;
  const Scalar _tmp234 = -_tmp148;
  const Scalar _tmp235 = _tmp147 + _tmp149 - _tmp150 + _tmp234;
  const Scalar _tmp236 = _tmp153 + _tmp154 + _tmp158;
  const Scalar _tmp237 =
      -_pose_j[0] * _tmp231 - _pose_j[1] * _tmp233 - _pose_j[2] * _tmp236 + _pose_j[3] * _tmp235;
  const Scalar _tmp238 = _tmp173 * _tmp237;
  const Scalar _tmp239 =
      _pose_j[0] * _tmp235 - _pose_j[1] * _tmp236 + _pose_j[2] * _tmp233 + _pose_j[3] * _tmp231;
  const Scalar _tmp240 = _tmp167 * sqrt_info(0, 0);
  const Scalar _tmp241 = _tmp177 * _tmp237;
  const Scalar _tmp242 = _tmp241 * _tmp48;
  const Scalar _tmp243 = _tmp175 * _tmp238 + _tmp239 * _tmp240 - _tmp242 * sqrt_info(0, 0);
  const Scalar _tmp244 = _tmp167 * _tmp239;
  const Scalar _tmp245 = _tmp241 * _tmp67;
  const Scalar _tmp246 =
      _pose_j[0] * _tmp236 + _pose_j[1] * _tmp235 - _pose_j[2] * _tmp231 + _pose_j[3] * _tmp233;
  const Scalar _tmp247 = _tmp167 * _tmp246;
  const Scalar _tmp248 = _tmp181 * _tmp238 + _tmp183 * _tmp238 - _tmp242 * sqrt_info(1, 0) +
                         _tmp244 * sqrt_info(1, 0) - _tmp245 * sqrt_info(1, 1) +
                         _tmp247 * sqrt_info(1, 1);
  const Scalar _tmp249 = _tmp167 * (-_pose_j[0] * _tmp233 + _pose_j[1] * _tmp231 +
                                    _pose_j[2] * _tmp235 + _pose_j[3] * _tmp236);
  const Scalar _tmp250 = _tmp186 * _tmp239 + _tmp187 * _tmp238 + _tmp188 * _tmp238 +
                         _tmp189 * _tmp238 - _tmp189 * _tmp241 - _tmp242 * sqrt_info(2, 0) -
                         _tmp245 * sqrt_info(2, 1) + _tmp247 * sqrt_info(2, 1) +
                         _tmp249 * sqrt_info(2, 2);
  const Scalar _tmp251 = -_tmp91;
  const Scalar _tmp252 = _tmp251 + _tmp89;
  const Scalar _tmp253 = _tmp106 + _tmp209;
  const Scalar _tmp254 = _tmp211 + _tmp78;
  const Scalar _tmp255 = -_tmp80;
  const Scalar _tmp256 = _tmp101 + _tmp255;
  const Scalar _tmp257 = _tmp254 + _tmp256;
  const Scalar _tmp258 = _tmp252 * _tmp83 + _tmp253 * _tmp97 + _tmp257 * _tmp93;
  const Scalar _tmp259 = _tmp167 * sqrt_info(3, 0);
  const Scalar _tmp260 = _tmp192 * _tmp238 + _tmp193 * _tmp238 - _tmp193 * _tmp241 +
                         _tmp194 * _tmp238 - _tmp194 * _tmp241 + _tmp239 * _tmp259 -
                         _tmp245 * sqrt_info(3, 1) + _tmp247 * sqrt_info(3, 1) +
                         _tmp249 * sqrt_info(3, 2) + _tmp258 * sqrt_info(3, 3);
  const Scalar _tmp261 = _tmp196 * _tmp238 - _tmp196 * _tmp241 + _tmp204 * _tmp238 +
                         _tmp205 * _tmp238 - _tmp205 * _tmp241 - _tmp242 * sqrt_info(4, 0) +
                         _tmp244 * sqrt_info(4, 0) + _tmp247 * sqrt_info(4, 1) +
                         _tmp249 * sqrt_info(4, 2) + _tmp258 * sqrt_info(4, 3);
  const Scalar _tmp262 = _tmp201 + _tmp256;
  const Scalar _tmp263 = _tmp262 * _tmp83 + _tmp98;
  const Scalar _tmp264 = _tmp167 * sqrt_info(5, 1);
  const Scalar _tmp265 = _tmp214 * _tmp238 - _tmp214 * _tmp241 + _tmp215 * _tmp238 -
                         _tmp215 * _tmp241 + _tmp216 * _tmp238 + _tmp244 * sqrt_info(5, 0) -
                         _tmp245 * sqrt_info(5, 1) + _tmp246 * _tmp264 + _tmp249 * sqrt_info(5, 2) +
                         _tmp258 * sqrt_info(5, 3) + _tmp263 * sqrt_info(5, 5);
  const Scalar _tmp266 = _tmp121 * _tmp252 + _tmp122 * _tmp257 + _tmp123 * _tmp253;
  const Scalar _tmp267 = _tmp218 * _tmp238 + _tmp219 * _tmp238 - _tmp219 * _tmp241 +
                         _tmp220 * _tmp238 - _tmp242 * sqrt_info(6, 0) + _tmp244 * sqrt_info(6, 0) -
                         _tmp245 * sqrt_info(6, 1) + _tmp247 * sqrt_info(6, 1) +
                         _tmp249 * sqrt_info(6, 2) + _tmp258 * sqrt_info(6, 3) +
                         _tmp263 * sqrt_info(6, 5) + _tmp266 * sqrt_info(6, 6);
  const Scalar _tmp268 = _tmp127 * _tmp238 - _tmp127 * _tmp241 + _tmp222 * _tmp238 +
                         _tmp223 * _tmp238 - _tmp242 * sqrt_info(7, 0) + _tmp244 * sqrt_info(7, 0) -
                         _tmp245 * sqrt_info(7, 1) + _tmp247 * sqrt_info(7, 1) +
                         _tmp249 * sqrt_info(7, 2) + _tmp258 * sqrt_info(7, 3) +
                         _tmp263 * sqrt_info(7, 5) + _tmp266 * sqrt_info(7, 6);
  const Scalar _tmp269 = _tmp226 * _tmp238 - _tmp226 * _tmp241 + _tmp227 * _tmp238 +
                         _tmp228 * _tmp238 - _tmp228 * _tmp241 + _tmp244 * sqrt_info(8, 0) -
                         _tmp245 * sqrt_info(8, 1) + _tmp247 * sqrt_info(8, 1) +
                         _tmp249 * sqrt_info(8, 2) + _tmp258 * sqrt_info(8, 3) +
                         _tmp263 * sqrt_info(8, 5) + _tmp266 * sqrt_info(8, 6) +
                         sqrt_info(8, 8) * (_tmp121 * _tmp262 + _tmp124);
  const Scalar _tmp270 = -_tmp133 + _tmp137 + _tmp230;
  const Scalar _tmp271 = _tmp140 + _tmp144 + _tmp232;
  const Scalar _tmp272 = _tmp146 + _tmp151 + _tmp234;
  const Scalar _tmp273 = _tmp153 + _tmp155 + _tmp156 + _tmp157;
  const Scalar _tmp274 =
      _pose_j[0] * _tmp270 - _pose_j[1] * _tmp271 + _pose_j[2] * _tmp273 + _pose_j[3] * _tmp272;
  const Scalar _tmp275 =
      -_pose_j[0] * _tmp272 - _pose_j[1] * _tmp273 - _pose_j[2] * _tmp271 + _pose_j[3] * _tmp270;
  const Scalar _tmp276 = _tmp173 * _tmp275;
  const Scalar _tmp277 = _tmp276 * _tmp48;
  const Scalar _tmp278 = _tmp177 * _tmp275;
  const Scalar _tmp279 = _tmp278 * _tmp48;
  const Scalar _tmp280 = _tmp240 * _tmp274 + _tmp277 * sqrt_info(0, 0) - _tmp279 * sqrt_info(0, 0);
  const Scalar _tmp281 = _tmp278 * _tmp67;
  const Scalar _tmp282 = _tmp167 * _tmp274;
  const Scalar _tmp283 = _tmp167 * (_pose_j[0] * _tmp271 + _pose_j[1] * _tmp270 -
                                    _pose_j[2] * _tmp272 + _pose_j[3] * _tmp273);
  const Scalar _tmp284 = _tmp276 * _tmp67;
  const Scalar _tmp285 = _tmp277 * sqrt_info(1, 0) - _tmp279 * sqrt_info(1, 0) -
                         _tmp281 * sqrt_info(1, 1) + _tmp282 * sqrt_info(1, 0) +
                         _tmp283 * sqrt_info(1, 1) + _tmp284 * sqrt_info(1, 1);
  const Scalar _tmp286 = _tmp167 * (-_pose_j[0] * _tmp273 + _pose_j[1] * _tmp272 +
                                    _pose_j[2] * _tmp270 + _pose_j[3] * _tmp271);
  const Scalar _tmp287 = _tmp186 * _tmp274 + _tmp189 * _tmp276 - _tmp189 * _tmp278 +
                         _tmp277 * sqrt_info(2, 0) - _tmp279 * sqrt_info(2, 0) -
                         _tmp281 * sqrt_info(2, 1) + _tmp283 * sqrt_info(2, 1) +
                         _tmp284 * sqrt_info(2, 1) + _tmp286 * sqrt_info(2, 2);
  const Scalar _tmp288 = _tmp197 + _tmp199 + _tmp255 + _tmp78;
  const Scalar _tmp289 = _tmp109 + _tmp288 * _tmp97;
  const Scalar _tmp290 = _tmp278 * _tmp74;
  const Scalar _tmp291 = _tmp193 * _tmp276 - _tmp193 * _tmp278 + _tmp194 * _tmp276 +
                         _tmp259 * _tmp274 - _tmp281 * sqrt_info(3, 1) + _tmp283 * sqrt_info(3, 1) +
                         _tmp284 * sqrt_info(3, 1) + _tmp286 * sqrt_info(3, 2) +
                         _tmp289 * sqrt_info(3, 3) - _tmp290 * sqrt_info(3, 2);
  const Scalar _tmp292 = _tmp251 + _tmp88;
  const Scalar _tmp293 = _tmp104 + _tmp207;
  const Scalar _tmp294 = _tmp198 + _tmp254;
  const Scalar _tmp295 = _tmp292 * _tmp93 + _tmp293 * _tmp97 + _tmp294 * _tmp83;
  const Scalar _tmp296 = _tmp196 * _tmp276 - _tmp196 * _tmp278 + _tmp205 * _tmp276 +
                         _tmp277 * sqrt_info(4, 0) - _tmp279 * sqrt_info(4, 0) +
                         _tmp282 * sqrt_info(4, 0) + _tmp283 * sqrt_info(4, 1) +
                         _tmp286 * sqrt_info(4, 2) + _tmp289 * sqrt_info(4, 3) -
                         _tmp290 * sqrt_info(4, 2) + _tmp295 * sqrt_info(4, 4);
  const Scalar _tmp297 = _tmp214 * _tmp276 + _tmp215 * _tmp276 - _tmp215 * _tmp278 -
                         _tmp281 * sqrt_info(5, 1) + _tmp282 * sqrt_info(5, 0) +
                         _tmp283 * sqrt_info(5, 1) + _tmp284 * sqrt_info(5, 1) +
                         _tmp286 * sqrt_info(5, 2) + _tmp289 * sqrt_info(5, 3) -
                         _tmp290 * sqrt_info(5, 2) + _tmp295 * sqrt_info(5, 4);
  const Scalar _tmp298 = _tmp123 * _tmp288 + _tmp128;
  const Scalar _tmp299 =
      _tmp219 * _tmp276 + _tmp277 * sqrt_info(6, 0) - _tmp279 * sqrt_info(6, 0) -
      _tmp281 * sqrt_info(6, 1) + _tmp282 * sqrt_info(6, 0) + _tmp283 * sqrt_info(6, 1) +
      _tmp284 * sqrt_info(6, 1) + _tmp286 * sqrt_info(6, 2) + _tmp289 * sqrt_info(6, 3) -
      _tmp290 * sqrt_info(6, 2) + _tmp295 * sqrt_info(6, 4) + _tmp298 * sqrt_info(6, 6);
  const Scalar _tmp300 = _tmp121 * _tmp294 + _tmp122 * _tmp292 + _tmp123 * _tmp293;
  const Scalar _tmp301 =
      _tmp127 * _tmp276 - _tmp127 * _tmp278 + _tmp223 * _tmp276 - _tmp279 * sqrt_info(7, 0) -
      _tmp281 * sqrt_info(7, 1) + _tmp282 * sqrt_info(7, 0) + _tmp283 * sqrt_info(7, 1) +
      _tmp284 * sqrt_info(7, 1) + _tmp286 * sqrt_info(7, 2) + _tmp289 * sqrt_info(7, 3) +
      _tmp295 * sqrt_info(7, 4) + _tmp298 * sqrt_info(7, 6) + _tmp300 * sqrt_info(7, 7);
  const Scalar _tmp302 =
      _tmp226 * _tmp276 + _tmp228 * _tmp276 - _tmp228 * _tmp278 - _tmp279 * sqrt_info(8, 0) -
      _tmp281 * sqrt_info(8, 1) + _tmp282 * sqrt_info(8, 0) + _tmp283 * sqrt_info(8, 1) +
      _tmp284 * sqrt_info(8, 1) + _tmp286 * sqrt_info(8, 2) + _tmp289 * sqrt_info(8, 3) +
      _tmp295 * sqrt_info(8, 4) + _tmp298 * sqrt_info(8, 6) + _tmp300 * sqrt_info(8, 7);
  const Scalar _tmp303 = _tmp82 * sqrt_info(6, 6);
  const Scalar _tmp304 = _tmp105 * sqrt_info(7, 7);
  const Scalar _tmp305 = _tmp82 * sqrt_info(7, 6);
  const Scalar _tmp306 = -_tmp304 - _tmp305;
  const Scalar _tmp307 = _tmp105 * sqrt_info(8, 7);
  const Scalar _tmp308 = _tmp113 * sqrt_info(8, 8);
  const Scalar _tmp309 = _tmp82 * sqrt_info(8, 6);
  const Scalar _tmp310 = -_tmp307 - _tmp308 - _tmp309;
  const Scalar _tmp311 = _tmp96 * sqrt_info(6, 6);
  const Scalar _tmp312 = _tmp96 * sqrt_info(7, 6);
  const Scalar _tmp313 = _tmp103 * sqrt_info(7, 7);
  const Scalar _tmp314 = -_tmp312 - _tmp313;
  const Scalar _tmp315 = _tmp96 * sqrt_info(8, 6);
  const Scalar _tmp316 = _tmp103 * sqrt_info(8, 7);
  const Scalar _tmp317 = _tmp115 * sqrt_info(8, 8);
  const Scalar _tmp318 = -_tmp315 - _tmp316 - _tmp317;
  const Scalar _tmp319 = _tmp92 * sqrt_info(6, 6);
  const Scalar _tmp320 = _tmp92 * sqrt_info(7, 6);
  const Scalar _tmp321 = _tmp108 * sqrt_info(7, 7);
  const Scalar _tmp322 = -_tmp320 - _tmp321;
  const Scalar _tmp323 = _tmp92 * sqrt_info(8, 6);
  const Scalar _tmp324 = _tmp112 * sqrt_info(8, 8);
  const Scalar _tmp325 = _tmp108 * sqrt_info(8, 7);
  const Scalar _tmp326 = -_tmp323 - _tmp324 - _tmp325;
  const Scalar _tmp327 = _tmp82 * sqrt_info(3, 3);
  const Scalar _tmp328 = _tmp105 * sqrt_info(4, 4);
  const Scalar _tmp329 = _tmp82 * sqrt_info(4, 3);
  const Scalar _tmp330 = -_tmp328 - _tmp329;
  const Scalar _tmp331 = _tmp105 * sqrt_info(5, 4);
  const Scalar _tmp332 = _tmp113 * sqrt_info(5, 5);
  const Scalar _tmp333 = _tmp82 * sqrt_info(5, 3);
  const Scalar _tmp334 = -_tmp331 - _tmp332 - _tmp333;
  const Scalar _tmp335 = _tmp105 * sqrt_info(6, 4);
  const Scalar _tmp336 = _tmp113 * sqrt_info(6, 5);
  const Scalar _tmp337 = _tmp82 * sqrt_info(6, 3);
  const Scalar _tmp338 = -_tmp303 * dt - _tmp335 - _tmp336 - _tmp337;
  const Scalar _tmp339 = _tmp105 * sqrt_info(7, 4);
  const Scalar _tmp340 = _tmp113 * sqrt_info(7, 5);
  const Scalar _tmp341 = _tmp82 * sqrt_info(7, 3);
  const Scalar _tmp342 = -_tmp304 * dt - _tmp305 * dt - _tmp339 - _tmp340 - _tmp341;
  const Scalar _tmp343 = _tmp105 * sqrt_info(8, 4);
  const Scalar _tmp344 = _tmp113 * sqrt_info(8, 5);
  const Scalar _tmp345 = _tmp82 * sqrt_info(8, 3);
  const Scalar _tmp346 = -_tmp307 * dt - _tmp308 * dt - _tmp309 * dt - _tmp343 - _tmp344 - _tmp345;
  const Scalar _tmp347 = _tmp96 * sqrt_info(3, 3);
  const Scalar _tmp348 = _tmp96 * sqrt_info(4, 3);
  const Scalar _tmp349 = _tmp103 * sqrt_info(4, 4);
  const Scalar _tmp350 = -_tmp348 - _tmp349;
  const Scalar _tmp351 = _tmp96 * sqrt_info(5, 3);
  const Scalar _tmp352 = _tmp103 * sqrt_info(5, 4);
  const Scalar _tmp353 = _tmp115 * sqrt_info(5, 5);
  const Scalar _tmp354 = -_tmp351 - _tmp352 - _tmp353;
  const Scalar _tmp355 = _tmp96 * sqrt_info(6, 3);
  const Scalar _tmp356 = _tmp103 * sqrt_info(6, 4);
  const Scalar _tmp357 = _tmp115 * sqrt_info(6, 5);
  const Scalar _tmp358 = -_tmp311 * dt - _tmp355 - _tmp356 - _tmp357;
  const Scalar _tmp359 = _tmp96 * sqrt_info(7, 3);
  const Scalar _tmp360 = _tmp103 * sqrt_info(7, 4);
  const Scalar _tmp361 = _tmp115 * sqrt_info(7, 5);
  const Scalar _tmp362 = -_tmp312 * dt - _tmp313 * dt - _tmp359 - _tmp360 - _tmp361;
  const Scalar _tmp363 = _tmp96 * sqrt_info(8, 3);
  const Scalar _tmp364 = _tmp103 * sqrt_info(8, 4);
  const Scalar _tmp365 = _tmp115 * sqrt_info(8, 5);
  const Scalar _tmp366 = -_tmp315 * dt - _tmp316 * dt - _tmp317 * dt - _tmp363 - _tmp364 - _tmp365;
  const Scalar _tmp367 = _tmp92 * sqrt_info(3, 3);
  const Scalar _tmp368 = _tmp92 * sqrt_info(4, 3);
  const Scalar _tmp369 = _tmp108 * sqrt_info(4, 4);
  const Scalar _tmp370 = -_tmp368 - _tmp369;
  const Scalar _tmp371 = _tmp92 * sqrt_info(5, 3);
  const Scalar _tmp372 = _tmp112 * sqrt_info(5, 5);
  const Scalar _tmp373 = _tmp108 * sqrt_info(5, 4);
  const Scalar _tmp374 = -_tmp371 - _tmp372 - _tmp373;
  const Scalar _tmp375 = _tmp92 * sqrt_info(6, 3);
  const Scalar _tmp376 = _tmp112 * sqrt_info(6, 5);
  const Scalar _tmp377 = _tmp108 * sqrt_info(6, 4);
  const Scalar _tmp378 = -_tmp319 * dt - _tmp375 - _tmp376 - _tmp377;
  const Scalar _tmp379 = _tmp92 * sqrt_info(7, 3);
  const Scalar _tmp380 = _tmp112 * sqrt_info(7, 5);
  const Scalar _tmp381 = _tmp108 * sqrt_info(7, 4);
  const Scalar _tmp382 = -_tmp320 * dt - _tmp321 * dt - _tmp379 - _tmp380 - _tmp381;
  const Scalar _tmp383 = _tmp92 * sqrt_info(8, 3);
  const Scalar _tmp384 = _tmp112 * sqrt_info(8, 5);
  const Scalar _tmp385 = _tmp108 * sqrt_info(8, 4);
  const Scalar _tmp386 = -_tmp323 * dt - _tmp324 * dt - _tmp325 * dt - _tmp383 - _tmp384 - _tmp385;
  const Scalar _tmp387 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp388 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp389 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp390 = (Scalar(1) / Scalar(2)) * _tmp47;
  const Scalar _tmp391 = _tmp387 + _tmp388 - _tmp389 + _tmp390;
  const Scalar _tmp392 = (((_tmp52 + _tmp56) > 0) - ((_tmp52 + _tmp56) < 0));
  const Scalar _tmp393 = _tmp176 * _tmp392;
  const Scalar _tmp394 = _tmp393 * _tmp48;
  const Scalar _tmp395 = _tmp391 * _tmp394;
  const Scalar _tmp396 = -Scalar(1) / Scalar(2) * _tmp49 - Scalar(1) / Scalar(2) * _tmp50 -
                         Scalar(1) / Scalar(2) * _tmp51 + (Scalar(1) / Scalar(2)) * _tmp53;
  const Scalar _tmp397 = _tmp172 * _tmp392;
  const Scalar _tmp398 = _tmp391 * _tmp397;
  const Scalar _tmp399 = _tmp175 * _tmp398 + _tmp240 * _tmp396 - _tmp395 * sqrt_info(0, 0);
  const Scalar _tmp400 = _tmp398 * _tmp67;
  const Scalar _tmp401 = _tmp167 * _tmp396;
  const Scalar _tmp402 = _tmp393 * _tmp67;
  const Scalar _tmp403 = _tmp391 * _tmp402;
  const Scalar _tmp404 = (Scalar(1) / Scalar(2)) * _tmp70;
  const Scalar _tmp405 = (Scalar(1) / Scalar(2)) * _tmp71;
  const Scalar _tmp406 = (Scalar(1) / Scalar(2)) * _tmp72;
  const Scalar _tmp407 = (Scalar(1) / Scalar(2)) * _tmp73;
  const Scalar _tmp408 = _tmp404 - _tmp405 + _tmp406 + _tmp407;
  const Scalar _tmp409 = _tmp167 * _tmp408;
  const Scalar _tmp410 = _tmp183 * _tmp398 - _tmp395 * sqrt_info(1, 0) + _tmp400 * sqrt_info(1, 1) +
                         _tmp401 * sqrt_info(1, 0) - _tmp403 * sqrt_info(1, 1) +
                         _tmp409 * sqrt_info(1, 1);
  const Scalar _tmp411 = (Scalar(1) / Scalar(2)) * _tmp63;
  const Scalar _tmp412 = (Scalar(1) / Scalar(2)) * _tmp64;
  const Scalar _tmp413 = (Scalar(1) / Scalar(2)) * _tmp65;
  const Scalar _tmp414 = (Scalar(1) / Scalar(2)) * _tmp66;
  const Scalar _tmp415 = _tmp167 * (-_tmp411 - _tmp412 - _tmp413 + _tmp414);
  const Scalar _tmp416 = _tmp189 * _tmp393;
  const Scalar _tmp417 = _tmp186 * _tmp396 + _tmp188 * _tmp398 + _tmp189 * _tmp398 -
                         _tmp391 * _tmp416 - _tmp395 * sqrt_info(2, 0) + _tmp400 * sqrt_info(2, 1) -
                         _tmp403 * sqrt_info(2, 1) + _tmp409 * sqrt_info(2, 1) +
                         _tmp415 * sqrt_info(2, 2);
  const Scalar _tmp418 = _tmp194 * _tmp397;
  const Scalar _tmp419 = _tmp391 * _tmp393;
  const Scalar _tmp420 = _tmp393 * _tmp74;
  const Scalar _tmp421 = _tmp391 * _tmp420;
  const Scalar _tmp422 = _tmp193 * _tmp398 - _tmp193 * _tmp419 + _tmp259 * _tmp396 +
                         _tmp391 * _tmp418 + _tmp400 * sqrt_info(3, 1) - _tmp403 * sqrt_info(3, 1) +
                         _tmp409 * sqrt_info(3, 1) + _tmp415 * sqrt_info(3, 2) -
                         _tmp421 * sqrt_info(3, 2);
  const Scalar _tmp423 = _tmp402 * sqrt_info(4, 1);
  const Scalar _tmp424 = _tmp196 * _tmp398 + _tmp204 * _tmp398 + _tmp205 * _tmp398 -
                         _tmp391 * _tmp423 - _tmp395 * sqrt_info(4, 0) + _tmp401 * sqrt_info(4, 0) +
                         _tmp409 * sqrt_info(4, 1) + _tmp415 * sqrt_info(4, 2) -
                         _tmp421 * sqrt_info(4, 2);
  const Scalar _tmp425 = _tmp214 * _tmp398 + _tmp215 * _tmp398 + _tmp264 * _tmp408 -
                         _tmp395 * sqrt_info(5, 0) + _tmp400 * sqrt_info(5, 1) +
                         _tmp401 * sqrt_info(5, 0) - _tmp403 * sqrt_info(5, 1) +
                         _tmp415 * sqrt_info(5, 2) - _tmp421 * sqrt_info(5, 2);
  const Scalar _tmp426 = _tmp219 * _tmp398 - _tmp219 * _tmp419 + _tmp220 * _tmp398 -
                         _tmp395 * sqrt_info(6, 0) + _tmp400 * sqrt_info(6, 1) +
                         _tmp401 * sqrt_info(6, 0) - _tmp403 * sqrt_info(6, 1) +
                         _tmp409 * sqrt_info(6, 1) + _tmp415 * sqrt_info(6, 2);
  const Scalar _tmp427 = _tmp127 * _tmp398 - _tmp127 * _tmp419 + _tmp223 * _tmp398 -
                         _tmp395 * sqrt_info(7, 0) + _tmp400 * sqrt_info(7, 1) +
                         _tmp401 * sqrt_info(7, 0) - _tmp403 * sqrt_info(7, 1) +
                         _tmp409 * sqrt_info(7, 1) + _tmp415 * sqrt_info(7, 2);
  const Scalar _tmp428 = _tmp226 * _tmp398 + _tmp228 * _tmp398 - _tmp228 * _tmp419 -
                         _tmp395 * sqrt_info(8, 0) + _tmp400 * sqrt_info(8, 1) +
                         _tmp401 * sqrt_info(8, 0) - _tmp403 * sqrt_info(8, 1) +
                         _tmp409 * sqrt_info(8, 1) + _tmp415 * sqrt_info(8, 2);
  const Scalar _tmp429 = _tmp411 + _tmp412 + _tmp413 - _tmp414;
  const Scalar _tmp430 = _tmp394 * _tmp429;
  const Scalar _tmp431 = _tmp397 * _tmp429;
  const Scalar _tmp432 = -_tmp404 + _tmp405 - _tmp406 - _tmp407;
  const Scalar _tmp433 = _tmp175 * _tmp431 + _tmp240 * _tmp432 - _tmp430 * sqrt_info(0, 0);
  const Scalar _tmp434 = _tmp402 * _tmp429;
  const Scalar _tmp435 = _tmp167 * _tmp432;
  const Scalar _tmp436 = _tmp431 * _tmp67;
  const Scalar _tmp437 = _tmp183 * _tmp431 + _tmp401 * sqrt_info(1, 1) - _tmp430 * sqrt_info(1, 0) -
                         _tmp434 * sqrt_info(1, 1) + _tmp435 * sqrt_info(1, 0) +
                         _tmp436 * sqrt_info(1, 1);
  const Scalar _tmp438 = _tmp394 * sqrt_info(2, 0);
  const Scalar _tmp439 = _tmp167 * _tmp391;
  const Scalar _tmp440 = _tmp186 * _tmp432 + _tmp188 * _tmp431 + _tmp189 * _tmp431 +
                         _tmp401 * sqrt_info(2, 1) - _tmp416 * _tmp429 - _tmp429 * _tmp438 -
                         _tmp434 * sqrt_info(2, 1) + _tmp436 * sqrt_info(2, 1) +
                         _tmp439 * sqrt_info(2, 2);
  const Scalar _tmp441 = _tmp420 * sqrt_info(3, 2);
  const Scalar _tmp442 = _tmp393 * _tmp429;
  const Scalar _tmp443 = _tmp193 * _tmp431 - _tmp193 * _tmp442 + _tmp259 * _tmp432 +
                         _tmp401 * sqrt_info(3, 1) + _tmp418 * _tmp429 - _tmp429 * _tmp441 -
                         _tmp434 * sqrt_info(3, 1) + _tmp436 * sqrt_info(3, 1) +
                         _tmp439 * sqrt_info(3, 2);
  const Scalar _tmp444 = _tmp420 * _tmp429;
  const Scalar _tmp445 = _tmp196 * _tmp431 + _tmp204 * _tmp431 + _tmp205 * _tmp431 +
                         _tmp401 * sqrt_info(4, 1) - _tmp430 * sqrt_info(4, 0) -
                         _tmp434 * sqrt_info(4, 1) + _tmp435 * sqrt_info(4, 0) +
                         _tmp439 * sqrt_info(4, 2) - _tmp444 * sqrt_info(4, 2);
  const Scalar _tmp446 = _tmp214 * _tmp431 + _tmp215 * _tmp431 + _tmp216 * _tmp431 +
                         _tmp264 * _tmp396 - _tmp430 * sqrt_info(5, 0) - _tmp434 * sqrt_info(5, 1) +
                         _tmp435 * sqrt_info(5, 0) + _tmp439 * sqrt_info(5, 2) -
                         _tmp444 * sqrt_info(5, 2);
  const Scalar _tmp447 = _tmp394 * sqrt_info(6, 0);
  const Scalar _tmp448 = _tmp219 * _tmp431 - _tmp219 * _tmp442 + _tmp220 * _tmp431 +
                         _tmp401 * sqrt_info(6, 1) - _tmp429 * _tmp447 - _tmp434 * sqrt_info(6, 1) +
                         _tmp435 * sqrt_info(6, 0) + _tmp436 * sqrt_info(6, 1) +
                         _tmp439 * sqrt_info(6, 2);
  const Scalar _tmp449 = _tmp127 * _tmp431 - _tmp127 * _tmp442 + _tmp223 * _tmp431 +
                         _tmp401 * sqrt_info(7, 1) - _tmp430 * sqrt_info(7, 0) -
                         _tmp434 * sqrt_info(7, 1) + _tmp435 * sqrt_info(7, 0) +
                         _tmp436 * sqrt_info(7, 1) + _tmp439 * sqrt_info(7, 2);
  const Scalar _tmp450 = _tmp226 * _tmp431 + _tmp228 * _tmp431 - _tmp228 * _tmp442 +
                         _tmp401 * sqrt_info(8, 1) - _tmp430 * sqrt_info(8, 0) -
                         _tmp434 * sqrt_info(8, 1) + _tmp435 * sqrt_info(8, 0) +
                         _tmp436 * sqrt_info(8, 1) + _tmp439 * sqrt_info(8, 2);
  const Scalar _tmp451 = _tmp167 * _tmp429;
  const Scalar _tmp452 = _tmp394 * _tmp408;
  const Scalar _tmp453 = _tmp397 * _tmp408;
  const Scalar _tmp454 = _tmp175 * _tmp453 + _tmp451 * sqrt_info(0, 0) - _tmp452 * sqrt_info(0, 0);
  const Scalar _tmp455 = _tmp402 * _tmp408;
  const Scalar _tmp456 = -_tmp387 - _tmp388 + _tmp389 - _tmp390;
  const Scalar _tmp457 = _tmp167 * _tmp456;
  const Scalar _tmp458 = _tmp181 * _tmp453 + _tmp183 * _tmp453 + _tmp451 * sqrt_info(1, 0) -
                         _tmp452 * sqrt_info(1, 0) - _tmp455 * sqrt_info(1, 1) +
                         _tmp457 * sqrt_info(1, 1);
  const Scalar _tmp459 = _tmp186 * _tmp429 + _tmp187 * _tmp453 + _tmp188 * _tmp453 +
                         _tmp189 * _tmp453 + _tmp401 * sqrt_info(2, 2) - _tmp408 * _tmp416 -
                         _tmp452 * sqrt_info(2, 0) - _tmp455 * sqrt_info(2, 1) +
                         _tmp457 * sqrt_info(2, 1);
  const Scalar _tmp460 = _tmp408 * _tmp420;
  const Scalar _tmp461 = _tmp453 * _tmp67;
  const Scalar _tmp462 = _tmp393 * _tmp408;
  const Scalar _tmp463 = _tmp193 * _tmp453 - _tmp193 * _tmp462 + _tmp401 * sqrt_info(3, 2) +
                         _tmp408 * _tmp418 + _tmp451 * sqrt_info(3, 0) - _tmp455 * sqrt_info(3, 1) +
                         _tmp457 * sqrt_info(3, 1) - _tmp460 * sqrt_info(3, 2) +
                         _tmp461 * sqrt_info(3, 1);
  const Scalar _tmp464 = _tmp196 * _tmp453 + _tmp204 * _tmp453 + _tmp205 * _tmp453 +
                         _tmp401 * sqrt_info(4, 2) + _tmp451 * sqrt_info(4, 0) -
                         _tmp452 * sqrt_info(4, 0) - _tmp455 * sqrt_info(4, 1) +
                         _tmp457 * sqrt_info(4, 1) - _tmp460 * sqrt_info(4, 2);
  const Scalar _tmp465 = _tmp214 * _tmp453 + _tmp215 * _tmp453 + _tmp216 * _tmp453 +
                         _tmp264 * _tmp456 + _tmp401 * sqrt_info(5, 2) + _tmp451 * sqrt_info(5, 0) -
                         _tmp452 * sqrt_info(5, 0) - _tmp455 * sqrt_info(5, 1) -
                         _tmp460 * sqrt_info(5, 2);
  const Scalar _tmp466 = _tmp219 * _tmp453 - _tmp219 * _tmp462 + _tmp220 * _tmp453 +
                         _tmp401 * sqrt_info(6, 2) + _tmp451 * sqrt_info(6, 0) -
                         _tmp452 * sqrt_info(6, 0) - _tmp455 * sqrt_info(6, 1) +
                         _tmp457 * sqrt_info(6, 1) + _tmp461 * sqrt_info(6, 1);
  const Scalar _tmp467 = _tmp127 * _tmp453 - _tmp127 * _tmp462 + _tmp223 * _tmp453 +
                         _tmp401 * sqrt_info(7, 2) + _tmp451 * sqrt_info(7, 0) -
                         _tmp452 * sqrt_info(7, 0) - _tmp455 * sqrt_info(7, 1) +
                         _tmp457 * sqrt_info(7, 1) + _tmp461 * sqrt_info(7, 1);
  const Scalar _tmp468 = _tmp226 * _tmp453 + _tmp227 * _tmp453 + _tmp228 * _tmp453 -
                         _tmp228 * _tmp462 + _tmp401 * sqrt_info(8, 2) + _tmp451 * sqrt_info(8, 0) -
                         _tmp452 * sqrt_info(8, 0) - _tmp455 * sqrt_info(8, 1) +
                         _tmp457 * sqrt_info(8, 1);
  const Scalar _tmp469 = _tmp304 + _tmp305;
  const Scalar _tmp470 = _tmp307 + _tmp308 + _tmp309;
  const Scalar _tmp471 = _tmp312 + _tmp313;
  const Scalar _tmp472 = _tmp315 + _tmp316 + _tmp317;
  const Scalar _tmp473 = _tmp320 + _tmp321;
  const Scalar _tmp474 = _tmp323 + _tmp324 + _tmp325;
  const Scalar _tmp475 = _tmp328 + _tmp329;
  const Scalar _tmp476 = _tmp331 + _tmp332 + _tmp333;
  const Scalar _tmp477 = _tmp335 + _tmp336 + _tmp337;
  const Scalar _tmp478 = _tmp339 + _tmp340 + _tmp341;
  const Scalar _tmp479 = _tmp343 + _tmp344 + _tmp345;
  const Scalar _tmp480 = _tmp348 + _tmp349;
  const Scalar _tmp481 = _tmp351 + _tmp352 + _tmp353;
  const Scalar _tmp482 = _tmp355 + _tmp356 + _tmp357;
  const Scalar _tmp483 = _tmp359 + _tmp360 + _tmp361;
  const Scalar _tmp484 = _tmp363 + _tmp364 + _tmp365;
  const Scalar _tmp485 = _tmp368 + _tmp369;
  const Scalar _tmp486 = _tmp371 + _tmp372 + _tmp373;
  const Scalar _tmp487 = _tmp375 + _tmp376 + _tmp377;
  const Scalar _tmp488 = _tmp379 + _tmp380 + _tmp381;
  const Scalar _tmp489 = _tmp383 + _tmp384 + _tmp385;
  const Scalar _tmp490 = Dv_D_accel_bias(0, 0) * sqrt_info(3, 3);
  const Scalar _tmp491 =
      -Dv_D_accel_bias(0, 0) * sqrt_info(4, 3) - Dv_D_accel_bias(1, 0) * sqrt_info(4, 4);
  const Scalar _tmp492 = -Dv_D_accel_bias(0, 0) * sqrt_info(5, 3) -
                         Dv_D_accel_bias(1, 0) * sqrt_info(5, 4) -
                         Dv_D_accel_bias(2, 0) * sqrt_info(5, 5);
  const Scalar _tmp493 =
      -Dp_D_accel_bias(0, 0) * sqrt_info(6, 6) - Dv_D_accel_bias(0, 0) * sqrt_info(6, 3) -
      Dv_D_accel_bias(1, 0) * sqrt_info(6, 4) - Dv_D_accel_bias(2, 0) * sqrt_info(6, 5);
  const Scalar _tmp494 =
      -Dp_D_accel_bias(0, 0) * sqrt_info(7, 6) - Dp_D_accel_bias(1, 0) * sqrt_info(7, 7) -
      Dv_D_accel_bias(0, 0) * sqrt_info(7, 3) - Dv_D_accel_bias(1, 0) * sqrt_info(7, 4) -
      Dv_D_accel_bias(2, 0) * sqrt_info(7, 5);
  const Scalar _tmp495 =
      -Dp_D_accel_bias(0, 0) * sqrt_info(8, 6) - Dp_D_accel_bias(1, 0) * sqrt_info(8, 7) -
      Dp_D_accel_bias(2, 0) * sqrt_info(8, 8) - Dv_D_accel_bias(0, 0) * sqrt_info(8, 3) -
      Dv_D_accel_bias(1, 0) * sqrt_info(8, 4) - Dv_D_accel_bias(2, 0) * sqrt_info(8, 5);
  const Scalar _tmp496 = Dv_D_accel_bias(0, 1) * sqrt_info(3, 3);
  const Scalar _tmp497 =
      -Dv_D_accel_bias(0, 1) * sqrt_info(4, 3) - Dv_D_accel_bias(1, 1) * sqrt_info(4, 4);
  const Scalar _tmp498 = -Dv_D_accel_bias(0, 1) * sqrt_info(5, 3) -
                         Dv_D_accel_bias(1, 1) * sqrt_info(5, 4) -
                         Dv_D_accel_bias(2, 1) * sqrt_info(5, 5);
  const Scalar _tmp499 =
      -Dp_D_accel_bias(0, 1) * sqrt_info(6, 6) - Dv_D_accel_bias(0, 1) * sqrt_info(6, 3) -
      Dv_D_accel_bias(1, 1) * sqrt_info(6, 4) - Dv_D_accel_bias(2, 1) * sqrt_info(6, 5);
  const Scalar _tmp500 =
      -Dp_D_accel_bias(0, 1) * sqrt_info(7, 6) - Dp_D_accel_bias(1, 1) * sqrt_info(7, 7) -
      Dv_D_accel_bias(0, 1) * sqrt_info(7, 3) - Dv_D_accel_bias(1, 1) * sqrt_info(7, 4) -
      Dv_D_accel_bias(2, 1) * sqrt_info(7, 5);
  const Scalar _tmp501 =
      -Dp_D_accel_bias(0, 1) * sqrt_info(8, 6) - Dp_D_accel_bias(1, 1) * sqrt_info(8, 7) -
      Dp_D_accel_bias(2, 1) * sqrt_info(8, 8) - Dv_D_accel_bias(0, 1) * sqrt_info(8, 3) -
      Dv_D_accel_bias(1, 1) * sqrt_info(8, 4) - Dv_D_accel_bias(2, 1) * sqrt_info(8, 5);
  const Scalar _tmp502 = Dv_D_accel_bias(0, 2) * sqrt_info(3, 3);
  const Scalar _tmp503 =
      -Dv_D_accel_bias(0, 2) * sqrt_info(4, 3) - Dv_D_accel_bias(1, 2) * sqrt_info(4, 4);
  const Scalar _tmp504 = -Dv_D_accel_bias(0, 2) * sqrt_info(5, 3) -
                         Dv_D_accel_bias(1, 2) * sqrt_info(5, 4) -
                         Dv_D_accel_bias(2, 2) * sqrt_info(5, 5);
  const Scalar _tmp505 =
      -Dp_D_accel_bias(0, 2) * sqrt_info(6, 6) - Dv_D_accel_bias(0, 2) * sqrt_info(6, 3) -
      Dv_D_accel_bias(1, 2) * sqrt_info(6, 4) - Dv_D_accel_bias(2, 2) * sqrt_info(6, 5);
  const Scalar _tmp506 =
      -Dp_D_accel_bias(0, 2) * sqrt_info(7, 6) - Dp_D_accel_bias(1, 2) * sqrt_info(7, 7) -
      Dv_D_accel_bias(0, 2) * sqrt_info(7, 3) - Dv_D_accel_bias(1, 2) * sqrt_info(7, 4) -
      Dv_D_accel_bias(2, 2) * sqrt_info(7, 5);
  const Scalar _tmp507 =
      -Dp_D_accel_bias(0, 2) * sqrt_info(8, 6) - Dp_D_accel_bias(1, 2) * sqrt_info(8, 7) -
      Dp_D_accel_bias(2, 2) * sqrt_info(8, 8) - Dv_D_accel_bias(0, 2) * sqrt_info(8, 3) -
      Dv_D_accel_bias(1, 2) * sqrt_info(8, 4) - Dv_D_accel_bias(2, 2) * sqrt_info(8, 5);
  const Scalar _tmp508 = 2 * _tmp3;
  const Scalar _tmp509 = 2 * _tmp4;
  const Scalar _tmp510 = 2 * _tmp5;
  const Scalar _tmp511 = DR_D_gyro_bias(0, 0) * _tmp508 + DR_D_gyro_bias(1, 0) * _tmp509 +
                         DR_D_gyro_bias(2, 0) * _tmp510;
  const Scalar _tmp512 = (Scalar(1) / Scalar(2)) * _tmp11 / (_tmp6 * std::sqrt(_tmp6));
  const Scalar _tmp513 = _tmp3 * _tmp512;
  const Scalar _tmp514 = _DR[0] * _tmp513;
  const Scalar _tmp515 = _tmp511 * _tmp512;
  const Scalar _tmp516 = _DR[1] * _tmp4;
  const Scalar _tmp517 = _DR[2] * _tmp5;
  const Scalar _tmp518 = (Scalar(1) / Scalar(4)) * _tmp511;
  const Scalar _tmp519 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp520 = _tmp25 * _tmp519;
  const Scalar _tmp521 = _tmp5 * _tmp520;
  const Scalar _tmp522 = _tmp22 * _tmp519;
  const Scalar _tmp523 = _tmp3 * _tmp522;
  const Scalar _tmp524 = _tmp4 * _tmp518;
  const Scalar _tmp525 = _tmp19 * _tmp519;
  const Scalar _tmp526 = -DR_D_gyro_bias(0, 0) * _tmp14 - DR_D_gyro_bias(1, 0) * _tmp13 -
                         DR_D_gyro_bias(2, 0) * _tmp15 - _tmp18 * _tmp518 + _tmp511 * _tmp514 +
                         _tmp515 * _tmp516 + _tmp515 * _tmp517 - _tmp518 * _tmp521 -
                         _tmp518 * _tmp523 - _tmp524 * _tmp525;
  const Scalar _tmp527 = _DR[3] * _tmp513;
  const Scalar _tmp528 = _DR[1] * _tmp5;
  const Scalar _tmp529 = _tmp5 * _tmp525;
  const Scalar _tmp530 = _tmp10 * _tmp519;
  const Scalar _tmp531 = _tmp3 * _tmp530;
  const Scalar _tmp532 = _DR[2] * _tmp4;
  const Scalar _tmp533 = DR_D_gyro_bias(0, 0) * _tmp18 - DR_D_gyro_bias(1, 0) * _tmp15 +
                         DR_D_gyro_bias(2, 0) * _tmp13 - _tmp14 * _tmp518 - _tmp511 * _tmp527 -
                         _tmp515 * _tmp528 + _tmp515 * _tmp532 + _tmp518 * _tmp529 +
                         _tmp518 * _tmp531 - _tmp520 * _tmp524;
  const Scalar _tmp534 = _DR[3] * _tmp4;
  const Scalar _tmp535 = _tmp3 * _tmp520;
  const Scalar _tmp536 = _tmp5 * _tmp522;
  const Scalar _tmp537 = _DR[2] * _tmp513;
  const Scalar _tmp538 = _DR[0] * _tmp5;
  const Scalar _tmp539 = DR_D_gyro_bias(0, 0) * _tmp15 + DR_D_gyro_bias(1, 0) * _tmp18 -
                         DR_D_gyro_bias(2, 0) * _tmp14 - _tmp13 * _tmp518 - _tmp511 * _tmp537 -
                         _tmp515 * _tmp534 + _tmp515 * _tmp538 + _tmp518 * _tmp535 -
                         _tmp518 * _tmp536 + _tmp524 * _tmp530;
  const Scalar _tmp540 = _DR[0] * _tmp4;
  const Scalar _tmp541 = _tmp512 * _tmp540;
  const Scalar _tmp542 = _DR[1] * _tmp513;
  const Scalar _tmp543 = _DR[3] * _tmp5;
  const Scalar _tmp544 = _tmp5 * _tmp530;
  const Scalar _tmp545 = _tmp3 * _tmp525;
  const Scalar _tmp546 = -DR_D_gyro_bias(0, 0) * _tmp13 + DR_D_gyro_bias(1, 0) * _tmp14 +
                         DR_D_gyro_bias(2, 0) * _tmp18 - _tmp15 * _tmp518 - _tmp511 * _tmp541 +
                         _tmp511 * _tmp542 - _tmp515 * _tmp543 + _tmp518 * _tmp544 -
                         _tmp518 * _tmp545 + _tmp522 * _tmp524;
  const Scalar _tmp547 =
      -_pose_i[0] * _tmp526 - _pose_i[1] * _tmp546 + _pose_i[2] * _tmp539 - _pose_i[3] * _tmp533;
  const Scalar _tmp548 =
      -_pose_i[0] * _tmp533 - _pose_i[1] * _tmp539 - _pose_i[2] * _tmp546 + _pose_i[3] * _tmp526;
  const Scalar _tmp549 =
      _pose_i[0] * _tmp546 - _pose_i[1] * _tmp526 - _pose_i[2] * _tmp533 - _pose_i[3] * _tmp539;
  const Scalar _tmp550 =
      -_pose_i[0] * _tmp539 + _pose_i[1] * _tmp533 - _pose_i[2] * _tmp526 - _pose_i[3] * _tmp546;
  const Scalar _tmp551 =
      _pose_j[0] * _tmp548 - _pose_j[1] * _tmp550 + _pose_j[2] * _tmp549 + _pose_j[3] * _tmp547;
  const Scalar _tmp552 = _tmp167 * _tmp551;
  const Scalar _tmp553 =
      _pose_j[0] * _tmp547 + _pose_j[1] * _tmp549 + _pose_j[2] * _tmp550 - _pose_j[3] * _tmp548;
  const Scalar _tmp554 = _tmp397 * _tmp553;
  const Scalar _tmp555 = _tmp394 * _tmp553;
  const Scalar _tmp556 = _tmp175 * _tmp554 + _tmp552 * sqrt_info(0, 0) - _tmp555 * sqrt_info(0, 0);
  const Scalar _tmp557 = _tmp167 * (_pose_j[0] * _tmp550 + _pose_j[1] * _tmp548 -
                                    _pose_j[2] * _tmp547 + _pose_j[3] * _tmp549);
  const Scalar _tmp558 = _tmp402 * _tmp553;
  const Scalar _tmp559 = _tmp554 * _tmp67;
  const Scalar _tmp560 = _tmp183 * _tmp554 + _tmp552 * sqrt_info(1, 0) - _tmp555 * sqrt_info(1, 0) +
                         _tmp557 * sqrt_info(1, 1) - _tmp558 * sqrt_info(1, 1) +
                         _tmp559 * sqrt_info(1, 1);
  const Scalar _tmp561 = _tmp167 * (-_pose_j[0] * _tmp549 + _pose_j[1] * _tmp547 +
                                    _pose_j[2] * _tmp548 + _pose_j[3] * _tmp550);
  const Scalar _tmp562 = _tmp186 * _tmp551 + _tmp188 * _tmp554 + _tmp189 * _tmp554 -
                         _tmp416 * _tmp553 - _tmp438 * _tmp553 + _tmp557 * sqrt_info(2, 1) -
                         _tmp558 * sqrt_info(2, 1) + _tmp559 * sqrt_info(2, 1) +
                         _tmp561 * sqrt_info(2, 2);
  const Scalar _tmp563 = _tmp393 * _tmp553;
  const Scalar _tmp564 = -Dv_D_gyro_bias(0, 0) * sqrt_info(3, 3) + _tmp193 * _tmp554 -
                         _tmp193 * _tmp563 + _tmp418 * _tmp553 - _tmp441 * _tmp553 +
                         _tmp552 * sqrt_info(3, 0) + _tmp557 * sqrt_info(3, 1) -
                         _tmp558 * sqrt_info(3, 1) + _tmp559 * sqrt_info(3, 1) +
                         _tmp561 * sqrt_info(3, 2);
  const Scalar _tmp565 = _tmp420 * _tmp553;
  const Scalar _tmp566 =
      -Dv_D_gyro_bias(0, 0) * sqrt_info(4, 3) - Dv_D_gyro_bias(1, 0) * sqrt_info(4, 4) +
      _tmp196 * _tmp554 + _tmp204 * _tmp554 + _tmp205 * _tmp554 - _tmp423 * _tmp553 +
      _tmp552 * sqrt_info(4, 0) - _tmp555 * sqrt_info(4, 0) + _tmp557 * sqrt_info(4, 1) +
      _tmp561 * sqrt_info(4, 2) - _tmp565 * sqrt_info(4, 2);
  const Scalar _tmp567 =
      -Dv_D_gyro_bias(0, 0) * sqrt_info(5, 3) - Dv_D_gyro_bias(1, 0) * sqrt_info(5, 4) -
      Dv_D_gyro_bias(2, 0) * sqrt_info(5, 5) + _tmp214 * _tmp554 + _tmp215 * _tmp554 +
      _tmp216 * _tmp554 + _tmp552 * sqrt_info(5, 0) - _tmp555 * sqrt_info(5, 0) +
      _tmp557 * sqrt_info(5, 1) - _tmp558 * sqrt_info(5, 1) + _tmp561 * sqrt_info(5, 2) -
      _tmp565 * sqrt_info(5, 2);
  const Scalar _tmp568 =
      -Dp_D_gyro_bias(0, 0) * sqrt_info(6, 6) - Dv_D_gyro_bias(0, 0) * sqrt_info(6, 3) -
      Dv_D_gyro_bias(1, 0) * sqrt_info(6, 4) - Dv_D_gyro_bias(2, 0) * sqrt_info(6, 5) +
      _tmp219 * _tmp554 - _tmp219 * _tmp563 + _tmp220 * _tmp554 - _tmp447 * _tmp553 +
      _tmp552 * sqrt_info(6, 0) + _tmp557 * sqrt_info(6, 1) - _tmp558 * sqrt_info(6, 1) +
      _tmp559 * sqrt_info(6, 1) + _tmp561 * sqrt_info(6, 2);
  const Scalar _tmp569 =
      -Dp_D_gyro_bias(0, 0) * sqrt_info(7, 6) - Dp_D_gyro_bias(1, 0) * sqrt_info(7, 7) -
      Dv_D_gyro_bias(0, 0) * sqrt_info(7, 3) - Dv_D_gyro_bias(1, 0) * sqrt_info(7, 4) -
      Dv_D_gyro_bias(2, 0) * sqrt_info(7, 5) + _tmp127 * _tmp554 - _tmp127 * _tmp563 +
      _tmp223 * _tmp554 + _tmp552 * sqrt_info(7, 0) - _tmp555 * sqrt_info(7, 0) +
      _tmp557 * sqrt_info(7, 1) - _tmp558 * sqrt_info(7, 1) + _tmp559 * sqrt_info(7, 1) +
      _tmp561 * sqrt_info(7, 2);
  const Scalar _tmp570 =
      -Dp_D_gyro_bias(0, 0) * sqrt_info(8, 6) - Dp_D_gyro_bias(1, 0) * sqrt_info(8, 7) -
      Dp_D_gyro_bias(2, 0) * sqrt_info(8, 8) - Dv_D_gyro_bias(0, 0) * sqrt_info(8, 3) -
      Dv_D_gyro_bias(1, 0) * sqrt_info(8, 4) - Dv_D_gyro_bias(2, 0) * sqrt_info(8, 5) +
      _tmp226 * _tmp554 + _tmp228 * _tmp554 - _tmp228 * _tmp563 + _tmp552 * sqrt_info(8, 0) -
      _tmp555 * sqrt_info(8, 0) + _tmp557 * sqrt_info(8, 1) - _tmp558 * sqrt_info(8, 1) +
      _tmp559 * sqrt_info(8, 1) + _tmp561 * sqrt_info(8, 2);
  const Scalar _tmp571 = DR_D_gyro_bias(0, 1) * _tmp508 + DR_D_gyro_bias(1, 1) * _tmp509 +
                         DR_D_gyro_bias(2, 1) * _tmp510;
  const Scalar _tmp572 = _tmp512 * _tmp571;
  const Scalar _tmp573 = (Scalar(1) / Scalar(4)) * _tmp571;
  const Scalar _tmp574 = _tmp4 * _tmp573;
  const Scalar _tmp575 = DR_D_gyro_bias(0, 1) * _tmp18 - DR_D_gyro_bias(1, 1) * _tmp15 +
                         DR_D_gyro_bias(2, 1) * _tmp13 - _tmp14 * _tmp573 - _tmp520 * _tmp574 -
                         _tmp527 * _tmp571 - _tmp528 * _tmp572 + _tmp529 * _tmp573 +
                         _tmp531 * _tmp573 + _tmp532 * _tmp572;
  const Scalar _tmp576 = DR_D_gyro_bias(0, 1) * _tmp15 + DR_D_gyro_bias(1, 1) * _tmp18 -
                         DR_D_gyro_bias(2, 1) * _tmp14 - _tmp13 * _tmp573 + _tmp530 * _tmp574 -
                         _tmp534 * _tmp572 + _tmp535 * _tmp573 - _tmp536 * _tmp573 -
                         _tmp537 * _tmp571 + _tmp538 * _tmp572;
  const Scalar _tmp577 = -DR_D_gyro_bias(0, 1) * _tmp13 + DR_D_gyro_bias(1, 1) * _tmp14 +
                         DR_D_gyro_bias(2, 1) * _tmp18 - _tmp15 * _tmp573 + _tmp522 * _tmp574 -
                         _tmp540 * _tmp572 + _tmp542 * _tmp571 - _tmp543 * _tmp572 +
                         _tmp544 * _tmp573 - _tmp545 * _tmp573;
  const Scalar _tmp578 = -DR_D_gyro_bias(0, 1) * _tmp14 - DR_D_gyro_bias(1, 1) * _tmp13 -
                         DR_D_gyro_bias(2, 1) * _tmp15 - _tmp18 * _tmp573 + _tmp514 * _tmp571 +
                         _tmp516 * _tmp572 + _tmp517 * _tmp572 - _tmp521 * _tmp573 -
                         _tmp523 * _tmp573 - _tmp525 * _tmp574;
  const Scalar _tmp579 =
      _pose_i[0] * _tmp577 - _pose_i[1] * _tmp578 - _pose_i[2] * _tmp575 - _pose_i[3] * _tmp576;
  const Scalar _tmp580 =
      -_pose_i[0] * _tmp576 + _pose_i[1] * _tmp575 - _pose_i[2] * _tmp578 - _pose_i[3] * _tmp577;
  const Scalar _tmp581 =
      -_pose_i[0] * _tmp578 - _pose_i[1] * _tmp577 + _pose_i[2] * _tmp576 - _pose_i[3] * _tmp575;
  const Scalar _tmp582 =
      -_pose_i[0] * _tmp575 - _pose_i[1] * _tmp576 - _pose_i[2] * _tmp577 + _pose_i[3] * _tmp578;
  const Scalar _tmp583 =
      _pose_j[0] * _tmp581 + _pose_j[1] * _tmp579 + _pose_j[2] * _tmp580 - _pose_j[3] * _tmp582;
  const Scalar _tmp584 = _tmp394 * _tmp583;
  const Scalar _tmp585 = _tmp397 * _tmp583;
  const Scalar _tmp586 =
      _pose_j[0] * _tmp582 - _pose_j[1] * _tmp580 + _pose_j[2] * _tmp579 + _pose_j[3] * _tmp581;
  const Scalar _tmp587 = _tmp175 * _tmp585 + _tmp240 * _tmp586 - _tmp584 * sqrt_info(0, 0);
  const Scalar _tmp588 = _tmp585 * _tmp67;
  const Scalar _tmp589 =
      _pose_j[0] * _tmp580 + _pose_j[1] * _tmp582 - _pose_j[2] * _tmp581 + _pose_j[3] * _tmp579;
  const Scalar _tmp590 = _tmp167 * _tmp589;
  const Scalar _tmp591 = _tmp402 * _tmp583;
  const Scalar _tmp592 = _tmp167 * _tmp586;
  const Scalar _tmp593 = _tmp183 * _tmp585 - _tmp584 * sqrt_info(1, 0) + _tmp588 * sqrt_info(1, 1) +
                         _tmp590 * sqrt_info(1, 1) - _tmp591 * sqrt_info(1, 1) +
                         _tmp592 * sqrt_info(1, 0);
  const Scalar _tmp594 = _tmp393 * _tmp583;
  const Scalar _tmp595 = _tmp167 * (-_pose_j[0] * _tmp579 + _pose_j[1] * _tmp581 +
                                    _pose_j[2] * _tmp582 + _pose_j[3] * _tmp580);
  const Scalar _tmp596 = _tmp186 * _tmp586 + _tmp188 * _tmp585 + _tmp189 * _tmp585 -
                         _tmp189 * _tmp594 - _tmp438 * _tmp583 + _tmp588 * sqrt_info(2, 1) +
                         _tmp590 * sqrt_info(2, 1) - _tmp591 * sqrt_info(2, 1) +
                         _tmp595 * sqrt_info(2, 2);
  const Scalar _tmp597 = -Dv_D_gyro_bias(0, 1) * sqrt_info(3, 3) + _tmp193 * _tmp585 -
                         _tmp193 * _tmp594 - _tmp194 * _tmp594 + _tmp259 * _tmp586 +
                         _tmp418 * _tmp583 + _tmp588 * sqrt_info(3, 1) + _tmp590 * sqrt_info(3, 1) -
                         _tmp591 * sqrt_info(3, 1) + _tmp595 * sqrt_info(3, 2);
  const Scalar _tmp598 =
      -Dv_D_gyro_bias(0, 1) * sqrt_info(4, 3) - Dv_D_gyro_bias(1, 1) * sqrt_info(4, 4) +
      _tmp196 * _tmp585 + _tmp204 * _tmp585 + _tmp205 * _tmp585 - _tmp205 * _tmp594 -
      _tmp584 * sqrt_info(4, 0) + _tmp590 * sqrt_info(4, 1) - _tmp591 * sqrt_info(4, 1) +
      _tmp592 * sqrt_info(4, 0) + _tmp595 * sqrt_info(4, 2);
  const Scalar _tmp599 =
      -Dv_D_gyro_bias(0, 1) * sqrt_info(5, 3) - Dv_D_gyro_bias(1, 1) * sqrt_info(5, 4) -
      Dv_D_gyro_bias(2, 1) * sqrt_info(5, 5) + _tmp214 * _tmp585 - _tmp214 * _tmp594 +
      _tmp215 * _tmp585 + _tmp264 * _tmp589 - _tmp584 * sqrt_info(5, 0) +
      _tmp588 * sqrt_info(5, 1) - _tmp591 * sqrt_info(5, 1) + _tmp592 * sqrt_info(5, 0) +
      _tmp595 * sqrt_info(5, 2);
  const Scalar _tmp600 =
      -Dp_D_gyro_bias(0, 1) * sqrt_info(6, 6) - Dv_D_gyro_bias(0, 1) * sqrt_info(6, 3) -
      Dv_D_gyro_bias(1, 1) * sqrt_info(6, 4) - Dv_D_gyro_bias(2, 1) * sqrt_info(6, 5) +
      _tmp219 * _tmp585 - _tmp219 * _tmp594 + _tmp220 * _tmp585 - _tmp447 * _tmp583 +
      _tmp588 * sqrt_info(6, 1) + _tmp590 * sqrt_info(6, 1) - _tmp591 * sqrt_info(6, 1) +
      _tmp592 * sqrt_info(6, 0) + _tmp595 * sqrt_info(6, 2);
  const Scalar _tmp601 =
      -Dp_D_gyro_bias(0, 1) * sqrt_info(7, 6) - Dp_D_gyro_bias(1, 1) * sqrt_info(7, 7) -
      Dv_D_gyro_bias(0, 1) * sqrt_info(7, 3) - Dv_D_gyro_bias(1, 1) * sqrt_info(7, 4) -
      Dv_D_gyro_bias(2, 1) * sqrt_info(7, 5) + _tmp127 * _tmp585 - _tmp127 * _tmp594 +
      _tmp223 * _tmp585 - _tmp584 * sqrt_info(7, 0) + _tmp588 * sqrt_info(7, 1) +
      _tmp590 * sqrt_info(7, 1) - _tmp591 * sqrt_info(7, 1) + _tmp592 * sqrt_info(7, 0) +
      _tmp595 * sqrt_info(7, 2);
  const Scalar _tmp602 =
      -Dp_D_gyro_bias(0, 1) * sqrt_info(8, 6) - Dp_D_gyro_bias(1, 1) * sqrt_info(8, 7) -
      Dp_D_gyro_bias(2, 1) * sqrt_info(8, 8) - Dv_D_gyro_bias(0, 1) * sqrt_info(8, 3) -
      Dv_D_gyro_bias(1, 1) * sqrt_info(8, 4) - Dv_D_gyro_bias(2, 1) * sqrt_info(8, 5) +
      _tmp226 * _tmp585 + _tmp228 * _tmp585 - _tmp228 * _tmp594 - _tmp584 * sqrt_info(8, 0) +
      _tmp588 * sqrt_info(8, 1) + _tmp590 * sqrt_info(8, 1) - _tmp591 * sqrt_info(8, 1) +
      _tmp592 * sqrt_info(8, 0) + _tmp595 * sqrt_info(8, 2);
  const Scalar _tmp603 = DR_D_gyro_bias(0, 2) * _tmp508 + DR_D_gyro_bias(1, 2) * _tmp509 +
                         DR_D_gyro_bias(2, 2) * _tmp510;
  const Scalar _tmp604 = _tmp512 * _tmp603;
  const Scalar _tmp605 = (Scalar(1) / Scalar(4)) * _tmp603;
  const Scalar _tmp606 = _tmp4 * _tmp605;
  const Scalar _tmp607 = DR_D_gyro_bias(0, 2) * _tmp15 + DR_D_gyro_bias(1, 2) * _tmp18 -
                         DR_D_gyro_bias(2, 2) * _tmp14 - _tmp13 * _tmp605 + _tmp530 * _tmp606 -
                         _tmp534 * _tmp604 + _tmp535 * _tmp605 - _tmp536 * _tmp605 -
                         _tmp537 * _tmp603 + _tmp538 * _tmp604;
  const Scalar _tmp608 = -DR_D_gyro_bias(0, 2) * _tmp14 - DR_D_gyro_bias(1, 2) * _tmp13 -
                         DR_D_gyro_bias(2, 2) * _tmp15 - _tmp18 * _tmp605 + _tmp514 * _tmp603 +
                         _tmp516 * _tmp604 + _tmp517 * _tmp604 - _tmp521 * _tmp605 -
                         _tmp523 * _tmp605 - _tmp525 * _tmp606;
  const Scalar _tmp609 = DR_D_gyro_bias(0, 2) * _tmp18 - DR_D_gyro_bias(1, 2) * _tmp15 +
                         DR_D_gyro_bias(2, 2) * _tmp13 - _tmp14 * _tmp605 - _tmp520 * _tmp606 -
                         _tmp527 * _tmp603 - _tmp528 * _tmp604 + _tmp529 * _tmp605 +
                         _tmp531 * _tmp605 + _tmp532 * _tmp604;
  const Scalar _tmp610 = -DR_D_gyro_bias(0, 2) * _tmp13 + DR_D_gyro_bias(1, 2) * _tmp14 +
                         DR_D_gyro_bias(2, 2) * _tmp18 - _tmp15 * _tmp605 + _tmp522 * _tmp606 -
                         _tmp541 * _tmp603 + _tmp542 * _tmp603 - _tmp543 * _tmp604 +
                         _tmp544 * _tmp605 - _tmp545 * _tmp605;
  const Scalar _tmp611 =
      -_pose_i[0] * _tmp609 - _pose_i[1] * _tmp607 - _pose_i[2] * _tmp610 + _pose_i[3] * _tmp608;
  const Scalar _tmp612 =
      -_pose_i[0] * _tmp608 - _pose_i[1] * _tmp610 + _pose_i[2] * _tmp607 - _pose_i[3] * _tmp609;
  const Scalar _tmp613 =
      _pose_i[0] * _tmp610 - _pose_i[1] * _tmp608 - _pose_i[2] * _tmp609 - _pose_i[3] * _tmp607;
  const Scalar _tmp614 =
      -_pose_i[0] * _tmp607 + _pose_i[1] * _tmp609 - _pose_i[2] * _tmp608 - _pose_i[3] * _tmp610;
  const Scalar _tmp615 =
      _pose_j[0] * _tmp611 - _pose_j[1] * _tmp614 + _pose_j[2] * _tmp613 + _pose_j[3] * _tmp612;
  const Scalar _tmp616 = _tmp167 * _tmp615;
  const Scalar _tmp617 =
      _pose_j[0] * _tmp612 + _pose_j[1] * _tmp613 + _pose_j[2] * _tmp614 - _pose_j[3] * _tmp611;
  const Scalar _tmp618 = _tmp393 * _tmp617;
  const Scalar _tmp619 = _tmp48 * _tmp618;
  const Scalar _tmp620 = _tmp397 * _tmp617;
  const Scalar _tmp621 = _tmp175 * _tmp620 + _tmp616 * sqrt_info(0, 0) - _tmp619 * sqrt_info(0, 0);
  const Scalar _tmp622 =
      _pose_j[0] * _tmp614 + _pose_j[1] * _tmp611 - _pose_j[2] * _tmp612 + _pose_j[3] * _tmp613;
  const Scalar _tmp623 = _tmp167 * _tmp622;
  const Scalar _tmp624 = _tmp618 * _tmp67;
  const Scalar _tmp625 = _tmp181 * _tmp620 + _tmp183 * _tmp620 + _tmp616 * sqrt_info(1, 0) -
                         _tmp619 * sqrt_info(1, 0) + _tmp623 * sqrt_info(1, 1) -
                         _tmp624 * sqrt_info(1, 1);
  const Scalar _tmp626 = _tmp167 * (-_pose_j[0] * _tmp613 + _pose_j[1] * _tmp612 +
                                    _pose_j[2] * _tmp611 + _pose_j[3] * _tmp614);
  const Scalar _tmp627 = _tmp186 * _tmp615 + _tmp187 * _tmp620 + _tmp188 * _tmp620 -
                         _tmp189 * _tmp618 + _tmp189 * _tmp620 - _tmp619 * sqrt_info(2, 0) +
                         _tmp623 * sqrt_info(2, 1) - _tmp624 * sqrt_info(2, 1) +
                         _tmp626 * sqrt_info(2, 2);
  const Scalar _tmp628 = _tmp620 * _tmp67;
  const Scalar _tmp629 = -Dv_D_gyro_bias(0, 2) * sqrt_info(3, 3) - _tmp193 * _tmp618 +
                         _tmp193 * _tmp620 - _tmp194 * _tmp618 + _tmp418 * _tmp617 +
                         _tmp616 * sqrt_info(3, 0) + _tmp623 * sqrt_info(3, 1) -
                         _tmp624 * sqrt_info(3, 1) + _tmp626 * sqrt_info(3, 2) +
                         _tmp628 * sqrt_info(3, 1);
  const Scalar _tmp630 = -Dv_D_gyro_bias(0, 2) * sqrt_info(4, 3) -
                         Dv_D_gyro_bias(1, 2) * sqrt_info(4, 4) - _tmp196 * _tmp618 +
                         _tmp196 * _tmp620 + _tmp204 * _tmp620 - _tmp205 * _tmp618 +
                         _tmp205 * _tmp620 + _tmp616 * sqrt_info(4, 0) - _tmp619 * sqrt_info(4, 0) +
                         _tmp623 * sqrt_info(4, 1) + _tmp626 * sqrt_info(4, 2);
  const Scalar _tmp631 =
      -Dv_D_gyro_bias(0, 2) * sqrt_info(5, 3) - Dv_D_gyro_bias(1, 2) * sqrt_info(5, 4) -
      Dv_D_gyro_bias(2, 2) * sqrt_info(5, 5) - _tmp214 * _tmp618 + _tmp214 * _tmp620 -
      _tmp215 * _tmp618 + _tmp215 * _tmp620 + _tmp216 * _tmp620 + _tmp264 * _tmp622 +
      _tmp616 * sqrt_info(5, 0) - _tmp624 * sqrt_info(5, 1) + _tmp626 * sqrt_info(5, 2);
  const Scalar _tmp632 =
      -Dp_D_gyro_bias(0, 2) * sqrt_info(6, 6) - Dv_D_gyro_bias(0, 2) * sqrt_info(6, 3) -
      Dv_D_gyro_bias(1, 2) * sqrt_info(6, 4) - Dv_D_gyro_bias(2, 2) * sqrt_info(6, 5) +
      _tmp218 * _tmp620 - _tmp219 * _tmp618 + _tmp219 * _tmp620 + _tmp220 * _tmp620 +
      _tmp616 * sqrt_info(6, 0) - _tmp619 * sqrt_info(6, 0) + _tmp623 * sqrt_info(6, 1) -
      _tmp624 * sqrt_info(6, 1) + _tmp626 * sqrt_info(6, 2);
  const Scalar _tmp633 =
      -Dp_D_gyro_bias(0, 2) * sqrt_info(7, 6) - Dp_D_gyro_bias(1, 2) * sqrt_info(7, 7) -
      Dv_D_gyro_bias(0, 2) * sqrt_info(7, 3) - Dv_D_gyro_bias(1, 2) * sqrt_info(7, 4) -
      Dv_D_gyro_bias(2, 2) * sqrt_info(7, 5) - _tmp127 * _tmp618 + _tmp127 * _tmp620 +
      _tmp223 * _tmp620 + _tmp616 * sqrt_info(7, 0) - _tmp619 * sqrt_info(7, 0) +
      _tmp623 * sqrt_info(7, 1) - _tmp624 * sqrt_info(7, 1) + _tmp626 * sqrt_info(7, 2) +
      _tmp628 * sqrt_info(7, 1);
  const Scalar _tmp634 =
      -Dp_D_gyro_bias(0, 2) * sqrt_info(8, 6) - Dp_D_gyro_bias(1, 2) * sqrt_info(8, 7) -
      Dp_D_gyro_bias(2, 2) * sqrt_info(8, 8) - Dv_D_gyro_bias(0, 2) * sqrt_info(8, 3) -
      Dv_D_gyro_bias(1, 2) * sqrt_info(8, 4) - Dv_D_gyro_bias(2, 2) * sqrt_info(8, 5) -
      _tmp226 * _tmp618 + _tmp226 * _tmp620 + _tmp227 * _tmp620 - _tmp228 * _tmp618 +
      _tmp228 * _tmp620 + _tmp616 * sqrt_info(8, 0) + _tmp623 * sqrt_info(8, 1) -
      _tmp624 * sqrt_info(8, 1) + _tmp626 * sqrt_info(8, 2);
  const Scalar _tmp635 = _tmp327 * dt;
  const Scalar _tmp636 = -_tmp328 * dt - _tmp329 * dt;
  const Scalar _tmp637 = -_tmp331 * dt - _tmp332 * dt - _tmp333 * dt;
  const Scalar _tmp638 = -_tmp120 * _tmp303 - _tmp335 * dt - _tmp336 * dt - _tmp337 * dt;
  const Scalar _tmp639 =
      -_tmp120 * _tmp304 - _tmp120 * _tmp305 - _tmp339 * dt - _tmp340 * dt - _tmp341 * dt;
  const Scalar _tmp640 = -_tmp120 * _tmp307 - _tmp120 * _tmp308 - _tmp120 * _tmp309 - _tmp343 * dt -
                         _tmp344 * dt - _tmp345 * dt;
  const Scalar _tmp641 = _tmp347 * dt;
  const Scalar _tmp642 = -_tmp348 * dt - _tmp349 * dt;
  const Scalar _tmp643 = -_tmp351 * dt - _tmp352 * dt - _tmp353 * dt;
  const Scalar _tmp644 = -_tmp120 * _tmp311 - _tmp355 * dt - _tmp356 * dt - _tmp357 * dt;
  const Scalar _tmp645 =
      -_tmp120 * _tmp312 - _tmp120 * _tmp313 - _tmp359 * dt - _tmp360 * dt - _tmp361 * dt;
  const Scalar _tmp646 = -_tmp120 * _tmp315 - _tmp120 * _tmp316 - _tmp120 * _tmp317 - _tmp363 * dt -
                         _tmp364 * dt - _tmp365 * dt;
  const Scalar _tmp647 = _tmp367 * dt;
  const Scalar _tmp648 = -_tmp368 * dt - _tmp369 * dt;
  const Scalar _tmp649 = -_tmp371 * dt - _tmp372 * dt - _tmp373 * dt;
  const Scalar _tmp650 = -_tmp120 * _tmp319 - _tmp375 * dt - _tmp376 * dt - _tmp377 * dt;
  const Scalar _tmp651 =
      -_tmp120 * _tmp320 - _tmp120 * _tmp321 - _tmp379 * dt - _tmp380 * dt - _tmp381 * dt;
  const Scalar _tmp652 = -_tmp120 * _tmp323 - _tmp120 * _tmp324 - _tmp120 * _tmp325 - _tmp383 * dt -
                         _tmp384 * dt - _tmp385 * dt;
  const Scalar _tmp653 = _tmp221 * _tmp303;
  const Scalar _tmp654 = _tmp221 * _tmp311;
  const Scalar _tmp655 = _tmp221 * _tmp319;
  const Scalar _tmp656 = _tmp195 * _tmp327;
  const Scalar _tmp657 = _tmp195 * _tmp347;
  const Scalar _tmp658 = _tmp195 * _tmp367;
  const Scalar _tmp659 = _tmp267 * _tmp303;
  const Scalar _tmp660 = _tmp267 * _tmp311;
  const Scalar _tmp661 = _tmp267 * _tmp319;
  const Scalar _tmp662 = _tmp260 * _tmp327;
  const Scalar _tmp663 = _tmp260 * _tmp347;
  const Scalar _tmp664 = _tmp260 * _tmp367;
  const Scalar _tmp665 = _tmp299 * _tmp303;
  const Scalar _tmp666 = _tmp299 * _tmp311;
  const Scalar _tmp667 = _tmp299 * _tmp319;
  const Scalar _tmp668 = _tmp291 * _tmp327;
  const Scalar _tmp669 = _tmp291 * _tmp347;
  const Scalar _tmp670 = _tmp291 * _tmp367;
  const Scalar _tmp671 = std::pow(_tmp82, Scalar(2));
  const Scalar _tmp672 = std::pow(sqrt_info(6, 6), Scalar(2));
  const Scalar _tmp673 = _tmp671 * _tmp672;
  const Scalar _tmp674 = _tmp672 * _tmp96;
  const Scalar _tmp675 = _tmp674 * _tmp82;
  const Scalar _tmp676 = _tmp82 * _tmp92;
  const Scalar _tmp677 = _tmp672 * _tmp676;
  const Scalar _tmp678 = _tmp303 * _tmp338;
  const Scalar _tmp679 = _tmp303 * _tmp358;
  const Scalar _tmp680 = _tmp303 * _tmp378;
  const Scalar _tmp681 = _tmp303 * _tmp426;
  const Scalar _tmp682 = _tmp303 * _tmp448;
  const Scalar _tmp683 = _tmp303 * _tmp466;
  const Scalar _tmp684 = -_tmp675;
  const Scalar _tmp685 = -_tmp677;
  const Scalar _tmp686 = _tmp303 * _tmp477;
  const Scalar _tmp687 = _tmp303 * _tmp482;
  const Scalar _tmp688 = _tmp303 * _tmp487;
  const Scalar _tmp689 = _tmp303 * _tmp493;
  const Scalar _tmp690 = _tmp303 * _tmp499;
  const Scalar _tmp691 = _tmp303 * _tmp505;
  const Scalar _tmp692 = _tmp303 * _tmp568;
  const Scalar _tmp693 = _tmp303 * _tmp600;
  const Scalar _tmp694 = _tmp303 * _tmp632;
  const Scalar _tmp695 = _tmp303 * _tmp638;
  const Scalar _tmp696 = _tmp303 * _tmp644;
  const Scalar _tmp697 = _tmp303 * _tmp650;
  const Scalar _tmp698 = std::pow(_tmp96, Scalar(2));
  const Scalar _tmp699 = _tmp672 * _tmp698;
  const Scalar _tmp700 = _tmp674 * _tmp92;
  const Scalar _tmp701 = _tmp311 * _tmp338;
  const Scalar _tmp702 = _tmp311 * _tmp358;
  const Scalar _tmp703 = _tmp311 * _tmp378;
  const Scalar _tmp704 = _tmp311 * _tmp426;
  const Scalar _tmp705 = _tmp311 * _tmp448;
  const Scalar _tmp706 = _tmp311 * _tmp466;
  const Scalar _tmp707 = -_tmp700;
  const Scalar _tmp708 = _tmp311 * _tmp477;
  const Scalar _tmp709 = _tmp311 * _tmp482;
  const Scalar _tmp710 = _tmp311 * _tmp487;
  const Scalar _tmp711 = _tmp311 * _tmp493;
  const Scalar _tmp712 = _tmp311 * _tmp499;
  const Scalar _tmp713 = _tmp311 * _tmp505;
  const Scalar _tmp714 = _tmp311 * _tmp568;
  const Scalar _tmp715 = _tmp311 * _tmp600;
  const Scalar _tmp716 = _tmp311 * _tmp632;
  const Scalar _tmp717 = _tmp311 * _tmp638;
  const Scalar _tmp718 = _tmp311 * _tmp644;
  const Scalar _tmp719 = _tmp311 * _tmp650;
  const Scalar _tmp720 = std::pow(_tmp92, Scalar(2));
  const Scalar _tmp721 = _tmp672 * _tmp720;
  const Scalar _tmp722 = _tmp319 * _tmp338;
  const Scalar _tmp723 = _tmp319 * _tmp358;
  const Scalar _tmp724 = _tmp319 * _tmp378;
  const Scalar _tmp725 = _tmp319 * _tmp426;
  const Scalar _tmp726 = _tmp319 * _tmp448;
  const Scalar _tmp727 = _tmp319 * _tmp466;
  const Scalar _tmp728 = _tmp319 * _tmp477;
  const Scalar _tmp729 = _tmp319 * _tmp482;
  const Scalar _tmp730 = _tmp319 * _tmp487;
  const Scalar _tmp731 = _tmp319 * _tmp493;
  const Scalar _tmp732 = _tmp319 * _tmp499;
  const Scalar _tmp733 = _tmp319 * _tmp505;
  const Scalar _tmp734 = _tmp319 * _tmp568;
  const Scalar _tmp735 = _tmp319 * _tmp600;
  const Scalar _tmp736 = _tmp319 * _tmp632;
  const Scalar _tmp737 = _tmp319 * _tmp638;
  const Scalar _tmp738 = _tmp319 * _tmp644;
  const Scalar _tmp739 = _tmp319 * _tmp650;
  const Scalar _tmp740 = std::pow(sqrt_info(3, 3), Scalar(2));
  const Scalar _tmp741 = _tmp671 * _tmp740;
  const Scalar _tmp742 = _tmp740 * _tmp96;
  const Scalar _tmp743 = _tmp742 * _tmp82;
  const Scalar _tmp744 = _tmp676 * _tmp740;
  const Scalar _tmp745 = _tmp327 * _tmp422;
  const Scalar _tmp746 = _tmp327 * _tmp443;
  const Scalar _tmp747 = _tmp327 * _tmp463;
  const Scalar _tmp748 = -_tmp743;
  const Scalar _tmp749 = -_tmp744;
  const Scalar _tmp750 = Dv_D_accel_bias(0, 0) * _tmp740;
  const Scalar _tmp751 = _tmp750 * _tmp82;
  const Scalar _tmp752 = _tmp740 * _tmp82;
  const Scalar _tmp753 = Dv_D_accel_bias(0, 1) * _tmp752;
  const Scalar _tmp754 = Dv_D_accel_bias(0, 2) * _tmp752;
  const Scalar _tmp755 = _tmp327 * _tmp564;
  const Scalar _tmp756 = _tmp327 * _tmp597;
  const Scalar _tmp757 = _tmp327 * _tmp629;
  const Scalar _tmp758 = _tmp741 * dt;
  const Scalar _tmp759 = _tmp743 * dt;
  const Scalar _tmp760 = _tmp744 * dt;
  const Scalar _tmp761 = _tmp698 * _tmp740;
  const Scalar _tmp762 = _tmp742 * _tmp92;
  const Scalar _tmp763 = _tmp347 * _tmp422;
  const Scalar _tmp764 = _tmp347 * _tmp443;
  const Scalar _tmp765 = _tmp347 * _tmp463;
  const Scalar _tmp766 = -_tmp762;
  const Scalar _tmp767 = _tmp750 * _tmp96;
  const Scalar _tmp768 = Dv_D_accel_bias(0, 1) * _tmp742;
  const Scalar _tmp769 = Dv_D_accel_bias(0, 2) * _tmp742;
  const Scalar _tmp770 = _tmp347 * _tmp564;
  const Scalar _tmp771 = _tmp347 * _tmp597;
  const Scalar _tmp772 = _tmp347 * _tmp629;
  const Scalar _tmp773 = _tmp761 * dt;
  const Scalar _tmp774 = _tmp762 * dt;
  const Scalar _tmp775 = _tmp720 * _tmp740;
  const Scalar _tmp776 = _tmp367 * _tmp422;
  const Scalar _tmp777 = _tmp367 * _tmp443;
  const Scalar _tmp778 = _tmp367 * _tmp463;
  const Scalar _tmp779 = _tmp750 * _tmp92;
  const Scalar _tmp780 = _tmp740 * _tmp92;
  const Scalar _tmp781 = Dv_D_accel_bias(0, 1) * _tmp780;
  const Scalar _tmp782 = Dv_D_accel_bias(0, 2) * _tmp780;
  const Scalar _tmp783 = _tmp367 * _tmp564;
  const Scalar _tmp784 = _tmp367 * _tmp597;
  const Scalar _tmp785 = _tmp367 * _tmp629;
  const Scalar _tmp786 = _tmp775 * dt;
  const Scalar _tmp787 = -_tmp759;
  const Scalar _tmp788 = -_tmp760;
  const Scalar _tmp789 = -_tmp774;
  const Scalar _tmp790 = _tmp126 * _tmp303;
  const Scalar _tmp791 = _tmp126 * _tmp311;
  const Scalar _tmp792 = _tmp126 * _tmp319;
  const Scalar _tmp793 = _tmp100 * _tmp327;
  const Scalar _tmp794 = _tmp100 * _tmp347;
  const Scalar _tmp795 = _tmp100 * _tmp367;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 9, 1>& _res = (*res);

    _res(0, 0) = _tmp62;
    _res(1, 0) = _tmp69;
    _res(2, 0) = _tmp77;
    _res(3, 0) = _tmp100;
    _res(4, 0) = _tmp111;
    _res(5, 0) = _tmp118;
    _res(6, 0) = _tmp126;
    _res(7, 0) = _tmp130;
    _res(8, 0) = _tmp132;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 9, 27>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp180;
    _jacobian(1, 0) = _tmp185;
    _jacobian(2, 0) = _tmp191;
    _jacobian(3, 0) = _tmp195;
    _jacobian(4, 0) = _tmp206;
    _jacobian(5, 0) = _tmp217;
    _jacobian(6, 0) = _tmp221;
    _jacobian(7, 0) = _tmp225;
    _jacobian(8, 0) = _tmp229;
    _jacobian(0, 1) = _tmp243;
    _jacobian(1, 1) = _tmp248;
    _jacobian(2, 1) = _tmp250;
    _jacobian(3, 1) = _tmp260;
    _jacobian(4, 1) = _tmp261;
    _jacobian(5, 1) = _tmp265;
    _jacobian(6, 1) = _tmp267;
    _jacobian(7, 1) = _tmp268;
    _jacobian(8, 1) = _tmp269;
    _jacobian(0, 2) = _tmp280;
    _jacobian(1, 2) = _tmp285;
    _jacobian(2, 2) = _tmp287;
    _jacobian(3, 2) = _tmp291;
    _jacobian(4, 2) = _tmp296;
    _jacobian(5, 2) = _tmp297;
    _jacobian(6, 2) = _tmp299;
    _jacobian(7, 2) = _tmp301;
    _jacobian(8, 2) = _tmp302;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(3, 3) = 0;
    _jacobian(4, 3) = 0;
    _jacobian(5, 3) = 0;
    _jacobian(6, 3) = -_tmp303;
    _jacobian(7, 3) = _tmp306;
    _jacobian(8, 3) = _tmp310;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(3, 4) = 0;
    _jacobian(4, 4) = 0;
    _jacobian(5, 4) = 0;
    _jacobian(6, 4) = -_tmp311;
    _jacobian(7, 4) = _tmp314;
    _jacobian(8, 4) = _tmp318;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(3, 5) = 0;
    _jacobian(4, 5) = 0;
    _jacobian(5, 5) = 0;
    _jacobian(6, 5) = -_tmp319;
    _jacobian(7, 5) = _tmp322;
    _jacobian(8, 5) = _tmp326;
    _jacobian(0, 6) = 0;
    _jacobian(1, 6) = 0;
    _jacobian(2, 6) = 0;
    _jacobian(3, 6) = -_tmp327;
    _jacobian(4, 6) = _tmp330;
    _jacobian(5, 6) = _tmp334;
    _jacobian(6, 6) = _tmp338;
    _jacobian(7, 6) = _tmp342;
    _jacobian(8, 6) = _tmp346;
    _jacobian(0, 7) = 0;
    _jacobian(1, 7) = 0;
    _jacobian(2, 7) = 0;
    _jacobian(3, 7) = -_tmp347;
    _jacobian(4, 7) = _tmp350;
    _jacobian(5, 7) = _tmp354;
    _jacobian(6, 7) = _tmp358;
    _jacobian(7, 7) = _tmp362;
    _jacobian(8, 7) = _tmp366;
    _jacobian(0, 8) = 0;
    _jacobian(1, 8) = 0;
    _jacobian(2, 8) = 0;
    _jacobian(3, 8) = -_tmp367;
    _jacobian(4, 8) = _tmp370;
    _jacobian(5, 8) = _tmp374;
    _jacobian(6, 8) = _tmp378;
    _jacobian(7, 8) = _tmp382;
    _jacobian(8, 8) = _tmp386;
    _jacobian(0, 9) = _tmp399;
    _jacobian(1, 9) = _tmp410;
    _jacobian(2, 9) = _tmp417;
    _jacobian(3, 9) = _tmp422;
    _jacobian(4, 9) = _tmp424;
    _jacobian(5, 9) = _tmp425;
    _jacobian(6, 9) = _tmp426;
    _jacobian(7, 9) = _tmp427;
    _jacobian(8, 9) = _tmp428;
    _jacobian(0, 10) = _tmp433;
    _jacobian(1, 10) = _tmp437;
    _jacobian(2, 10) = _tmp440;
    _jacobian(3, 10) = _tmp443;
    _jacobian(4, 10) = _tmp445;
    _jacobian(5, 10) = _tmp446;
    _jacobian(6, 10) = _tmp448;
    _jacobian(7, 10) = _tmp449;
    _jacobian(8, 10) = _tmp450;
    _jacobian(0, 11) = _tmp454;
    _jacobian(1, 11) = _tmp458;
    _jacobian(2, 11) = _tmp459;
    _jacobian(3, 11) = _tmp463;
    _jacobian(4, 11) = _tmp464;
    _jacobian(5, 11) = _tmp465;
    _jacobian(6, 11) = _tmp466;
    _jacobian(7, 11) = _tmp467;
    _jacobian(8, 11) = _tmp468;
    _jacobian(0, 12) = 0;
    _jacobian(1, 12) = 0;
    _jacobian(2, 12) = 0;
    _jacobian(3, 12) = 0;
    _jacobian(4, 12) = 0;
    _jacobian(5, 12) = 0;
    _jacobian(6, 12) = _tmp303;
    _jacobian(7, 12) = _tmp469;
    _jacobian(8, 12) = _tmp470;
    _jacobian(0, 13) = 0;
    _jacobian(1, 13) = 0;
    _jacobian(2, 13) = 0;
    _jacobian(3, 13) = 0;
    _jacobian(4, 13) = 0;
    _jacobian(5, 13) = 0;
    _jacobian(6, 13) = _tmp311;
    _jacobian(7, 13) = _tmp471;
    _jacobian(8, 13) = _tmp472;
    _jacobian(0, 14) = 0;
    _jacobian(1, 14) = 0;
    _jacobian(2, 14) = 0;
    _jacobian(3, 14) = 0;
    _jacobian(4, 14) = 0;
    _jacobian(5, 14) = 0;
    _jacobian(6, 14) = _tmp319;
    _jacobian(7, 14) = _tmp473;
    _jacobian(8, 14) = _tmp474;
    _jacobian(0, 15) = 0;
    _jacobian(1, 15) = 0;
    _jacobian(2, 15) = 0;
    _jacobian(3, 15) = _tmp327;
    _jacobian(4, 15) = _tmp475;
    _jacobian(5, 15) = _tmp476;
    _jacobian(6, 15) = _tmp477;
    _jacobian(7, 15) = _tmp478;
    _jacobian(8, 15) = _tmp479;
    _jacobian(0, 16) = 0;
    _jacobian(1, 16) = 0;
    _jacobian(2, 16) = 0;
    _jacobian(3, 16) = _tmp347;
    _jacobian(4, 16) = _tmp480;
    _jacobian(5, 16) = _tmp481;
    _jacobian(6, 16) = _tmp482;
    _jacobian(7, 16) = _tmp483;
    _jacobian(8, 16) = _tmp484;
    _jacobian(0, 17) = 0;
    _jacobian(1, 17) = 0;
    _jacobian(2, 17) = 0;
    _jacobian(3, 17) = _tmp367;
    _jacobian(4, 17) = _tmp485;
    _jacobian(5, 17) = _tmp486;
    _jacobian(6, 17) = _tmp487;
    _jacobian(7, 17) = _tmp488;
    _jacobian(8, 17) = _tmp489;
    _jacobian(0, 18) = 0;
    _jacobian(1, 18) = 0;
    _jacobian(2, 18) = 0;
    _jacobian(3, 18) = -_tmp490;
    _jacobian(4, 18) = _tmp491;
    _jacobian(5, 18) = _tmp492;
    _jacobian(6, 18) = _tmp493;
    _jacobian(7, 18) = _tmp494;
    _jacobian(8, 18) = _tmp495;
    _jacobian(0, 19) = 0;
    _jacobian(1, 19) = 0;
    _jacobian(2, 19) = 0;
    _jacobian(3, 19) = -_tmp496;
    _jacobian(4, 19) = _tmp497;
    _jacobian(5, 19) = _tmp498;
    _jacobian(6, 19) = _tmp499;
    _jacobian(7, 19) = _tmp500;
    _jacobian(8, 19) = _tmp501;
    _jacobian(0, 20) = 0;
    _jacobian(1, 20) = 0;
    _jacobian(2, 20) = 0;
    _jacobian(3, 20) = -_tmp502;
    _jacobian(4, 20) = _tmp503;
    _jacobian(5, 20) = _tmp504;
    _jacobian(6, 20) = _tmp505;
    _jacobian(7, 20) = _tmp506;
    _jacobian(8, 20) = _tmp507;
    _jacobian(0, 21) = _tmp556;
    _jacobian(1, 21) = _tmp560;
    _jacobian(2, 21) = _tmp562;
    _jacobian(3, 21) = _tmp564;
    _jacobian(4, 21) = _tmp566;
    _jacobian(5, 21) = _tmp567;
    _jacobian(6, 21) = _tmp568;
    _jacobian(7, 21) = _tmp569;
    _jacobian(8, 21) = _tmp570;
    _jacobian(0, 22) = _tmp587;
    _jacobian(1, 22) = _tmp593;
    _jacobian(2, 22) = _tmp596;
    _jacobian(3, 22) = _tmp597;
    _jacobian(4, 22) = _tmp598;
    _jacobian(5, 22) = _tmp599;
    _jacobian(6, 22) = _tmp600;
    _jacobian(7, 22) = _tmp601;
    _jacobian(8, 22) = _tmp602;
    _jacobian(0, 23) = _tmp621;
    _jacobian(1, 23) = _tmp625;
    _jacobian(2, 23) = _tmp627;
    _jacobian(3, 23) = _tmp629;
    _jacobian(4, 23) = _tmp630;
    _jacobian(5, 23) = _tmp631;
    _jacobian(6, 23) = _tmp632;
    _jacobian(7, 23) = _tmp633;
    _jacobian(8, 23) = _tmp634;
    _jacobian(0, 24) = 0;
    _jacobian(1, 24) = 0;
    _jacobian(2, 24) = 0;
    _jacobian(3, 24) = -_tmp635;
    _jacobian(4, 24) = _tmp636;
    _jacobian(5, 24) = _tmp637;
    _jacobian(6, 24) = _tmp638;
    _jacobian(7, 24) = _tmp639;
    _jacobian(8, 24) = _tmp640;
    _jacobian(0, 25) = 0;
    _jacobian(1, 25) = 0;
    _jacobian(2, 25) = 0;
    _jacobian(3, 25) = -_tmp641;
    _jacobian(4, 25) = _tmp642;
    _jacobian(5, 25) = _tmp643;
    _jacobian(6, 25) = _tmp644;
    _jacobian(7, 25) = _tmp645;
    _jacobian(8, 25) = _tmp646;
    _jacobian(0, 26) = 0;
    _jacobian(1, 26) = 0;
    _jacobian(2, 26) = 0;
    _jacobian(3, 26) = -_tmp647;
    _jacobian(4, 26) = _tmp648;
    _jacobian(5, 26) = _tmp649;
    _jacobian(6, 26) = _tmp650;
    _jacobian(7, 26) = _tmp651;
    _jacobian(8, 26) = _tmp652;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 27, 27>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp180, Scalar(2)) + std::pow(_tmp185, Scalar(2)) + std::pow(_tmp191, Scalar(2)) +
        std::pow(_tmp195, Scalar(2)) + std::pow(_tmp206, Scalar(2)) + std::pow(_tmp217, Scalar(2)) +
        std::pow(_tmp221, Scalar(2)) + std::pow(_tmp225, Scalar(2)) + std::pow(_tmp229, Scalar(2));
    _hessian(1, 0) = _tmp180 * _tmp243 + _tmp185 * _tmp248 + _tmp191 * _tmp250 + _tmp195 * _tmp260 +
                     _tmp206 * _tmp261 + _tmp217 * _tmp265 + _tmp221 * _tmp267 + _tmp225 * _tmp268 +
                     _tmp229 * _tmp269;
    _hessian(2, 0) = _tmp180 * _tmp280 + _tmp185 * _tmp285 + _tmp191 * _tmp287 + _tmp195 * _tmp291 +
                     _tmp206 * _tmp296 + _tmp217 * _tmp297 + _tmp221 * _tmp299 + _tmp225 * _tmp301 +
                     _tmp229 * _tmp302;
    _hessian(3, 0) = _tmp225 * _tmp306 + _tmp229 * _tmp310 - _tmp653;
    _hessian(4, 0) = _tmp225 * _tmp314 + _tmp229 * _tmp318 - _tmp654;
    _hessian(5, 0) = _tmp225 * _tmp322 + _tmp229 * _tmp326 - _tmp655;
    _hessian(6, 0) = _tmp206 * _tmp330 + _tmp217 * _tmp334 + _tmp221 * _tmp338 + _tmp225 * _tmp342 +
                     _tmp229 * _tmp346 - _tmp656;
    _hessian(7, 0) = _tmp206 * _tmp350 + _tmp217 * _tmp354 + _tmp221 * _tmp358 + _tmp225 * _tmp362 +
                     _tmp229 * _tmp366 - _tmp657;
    _hessian(8, 0) = _tmp206 * _tmp370 + _tmp217 * _tmp374 + _tmp221 * _tmp378 + _tmp225 * _tmp382 +
                     _tmp229 * _tmp386 - _tmp658;
    _hessian(9, 0) = _tmp180 * _tmp399 + _tmp185 * _tmp410 + _tmp191 * _tmp417 + _tmp195 * _tmp422 +
                     _tmp206 * _tmp424 + _tmp217 * _tmp425 + _tmp221 * _tmp426 + _tmp225 * _tmp427 +
                     _tmp229 * _tmp428;
    _hessian(10, 0) = _tmp180 * _tmp433 + _tmp185 * _tmp437 + _tmp191 * _tmp440 +
                      _tmp195 * _tmp443 + _tmp206 * _tmp445 + _tmp217 * _tmp446 +
                      _tmp221 * _tmp448 + _tmp225 * _tmp449 + _tmp229 * _tmp450;
    _hessian(11, 0) = _tmp180 * _tmp454 + _tmp185 * _tmp458 + _tmp191 * _tmp459 +
                      _tmp195 * _tmp463 + _tmp206 * _tmp464 + _tmp217 * _tmp465 +
                      _tmp221 * _tmp466 + _tmp225 * _tmp467 + _tmp229 * _tmp468;
    _hessian(12, 0) = _tmp225 * _tmp469 + _tmp229 * _tmp470 + _tmp653;
    _hessian(13, 0) = _tmp225 * _tmp471 + _tmp229 * _tmp472 + _tmp654;
    _hessian(14, 0) = _tmp225 * _tmp473 + _tmp229 * _tmp474 + _tmp655;
    _hessian(15, 0) = _tmp206 * _tmp475 + _tmp217 * _tmp476 + _tmp221 * _tmp477 +
                      _tmp225 * _tmp478 + _tmp229 * _tmp479 + _tmp656;
    _hessian(16, 0) = _tmp206 * _tmp480 + _tmp217 * _tmp481 + _tmp221 * _tmp482 +
                      _tmp225 * _tmp483 + _tmp229 * _tmp484 + _tmp657;
    _hessian(17, 0) = _tmp206 * _tmp485 + _tmp217 * _tmp486 + _tmp221 * _tmp487 +
                      _tmp225 * _tmp488 + _tmp229 * _tmp489 + _tmp658;
    _hessian(18, 0) = -_tmp195 * _tmp490 + _tmp206 * _tmp491 + _tmp217 * _tmp492 +
                      _tmp221 * _tmp493 + _tmp225 * _tmp494 + _tmp229 * _tmp495;
    _hessian(19, 0) = -_tmp195 * _tmp496 + _tmp206 * _tmp497 + _tmp217 * _tmp498 +
                      _tmp221 * _tmp499 + _tmp225 * _tmp500 + _tmp229 * _tmp501;
    _hessian(20, 0) = -_tmp195 * _tmp502 + _tmp206 * _tmp503 + _tmp217 * _tmp504 +
                      _tmp221 * _tmp505 + _tmp225 * _tmp506 + _tmp229 * _tmp507;
    _hessian(21, 0) = _tmp180 * _tmp556 + _tmp185 * _tmp560 + _tmp191 * _tmp562 +
                      _tmp195 * _tmp564 + _tmp206 * _tmp566 + _tmp217 * _tmp567 +
                      _tmp221 * _tmp568 + _tmp225 * _tmp569 + _tmp229 * _tmp570;
    _hessian(22, 0) = _tmp180 * _tmp587 + _tmp185 * _tmp593 + _tmp191 * _tmp596 +
                      _tmp195 * _tmp597 + _tmp206 * _tmp598 + _tmp217 * _tmp599 +
                      _tmp221 * _tmp600 + _tmp225 * _tmp601 + _tmp229 * _tmp602;
    _hessian(23, 0) = _tmp180 * _tmp621 + _tmp185 * _tmp625 + _tmp191 * _tmp627 +
                      _tmp195 * _tmp629 + _tmp206 * _tmp630 + _tmp217 * _tmp631 +
                      _tmp221 * _tmp632 + _tmp225 * _tmp633 + _tmp229 * _tmp634;
    _hessian(24, 0) = _tmp206 * _tmp636 + _tmp217 * _tmp637 + _tmp221 * _tmp638 +
                      _tmp225 * _tmp639 + _tmp229 * _tmp640 - _tmp656 * dt;
    _hessian(25, 0) = _tmp206 * _tmp642 + _tmp217 * _tmp643 + _tmp221 * _tmp644 +
                      _tmp225 * _tmp645 + _tmp229 * _tmp646 - _tmp657 * dt;
    _hessian(26, 0) = _tmp206 * _tmp648 + _tmp217 * _tmp649 + _tmp221 * _tmp650 +
                      _tmp225 * _tmp651 + _tmp229 * _tmp652 - _tmp658 * dt;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp243, Scalar(2)) + std::pow(_tmp248, Scalar(2)) + std::pow(_tmp250, Scalar(2)) +
        std::pow(_tmp260, Scalar(2)) + std::pow(_tmp261, Scalar(2)) + std::pow(_tmp265, Scalar(2)) +
        std::pow(_tmp267, Scalar(2)) + std::pow(_tmp268, Scalar(2)) + std::pow(_tmp269, Scalar(2));
    _hessian(2, 1) = _tmp243 * _tmp280 + _tmp248 * _tmp285 + _tmp250 * _tmp287 + _tmp260 * _tmp291 +
                     _tmp261 * _tmp296 + _tmp265 * _tmp297 + _tmp267 * _tmp299 + _tmp268 * _tmp301 +
                     _tmp269 * _tmp302;
    _hessian(3, 1) = _tmp268 * _tmp306 + _tmp269 * _tmp310 - _tmp659;
    _hessian(4, 1) = _tmp268 * _tmp314 + _tmp269 * _tmp318 - _tmp660;
    _hessian(5, 1) = _tmp268 * _tmp322 + _tmp269 * _tmp326 - _tmp661;
    _hessian(6, 1) = _tmp261 * _tmp330 + _tmp265 * _tmp334 + _tmp267 * _tmp338 + _tmp268 * _tmp342 +
                     _tmp269 * _tmp346 - _tmp662;
    _hessian(7, 1) = _tmp261 * _tmp350 + _tmp265 * _tmp354 + _tmp267 * _tmp358 + _tmp268 * _tmp362 +
                     _tmp269 * _tmp366 - _tmp663;
    _hessian(8, 1) = _tmp261 * _tmp370 + _tmp265 * _tmp374 + _tmp267 * _tmp378 + _tmp268 * _tmp382 +
                     _tmp269 * _tmp386 - _tmp664;
    _hessian(9, 1) = _tmp243 * _tmp399 + _tmp248 * _tmp410 + _tmp250 * _tmp417 + _tmp260 * _tmp422 +
                     _tmp261 * _tmp424 + _tmp265 * _tmp425 + _tmp267 * _tmp426 + _tmp268 * _tmp427 +
                     _tmp269 * _tmp428;
    _hessian(10, 1) = _tmp243 * _tmp433 + _tmp248 * _tmp437 + _tmp250 * _tmp440 +
                      _tmp260 * _tmp443 + _tmp261 * _tmp445 + _tmp265 * _tmp446 +
                      _tmp267 * _tmp448 + _tmp268 * _tmp449 + _tmp269 * _tmp450;
    _hessian(11, 1) = _tmp243 * _tmp454 + _tmp248 * _tmp458 + _tmp250 * _tmp459 +
                      _tmp260 * _tmp463 + _tmp261 * _tmp464 + _tmp265 * _tmp465 +
                      _tmp267 * _tmp466 + _tmp268 * _tmp467 + _tmp269 * _tmp468;
    _hessian(12, 1) = _tmp268 * _tmp469 + _tmp269 * _tmp470 + _tmp659;
    _hessian(13, 1) = _tmp268 * _tmp471 + _tmp269 * _tmp472 + _tmp660;
    _hessian(14, 1) = _tmp268 * _tmp473 + _tmp269 * _tmp474 + _tmp661;
    _hessian(15, 1) = _tmp261 * _tmp475 + _tmp265 * _tmp476 + _tmp267 * _tmp477 +
                      _tmp268 * _tmp478 + _tmp269 * _tmp479 + _tmp662;
    _hessian(16, 1) = _tmp261 * _tmp480 + _tmp265 * _tmp481 + _tmp267 * _tmp482 +
                      _tmp268 * _tmp483 + _tmp269 * _tmp484 + _tmp663;
    _hessian(17, 1) = _tmp261 * _tmp485 + _tmp265 * _tmp486 + _tmp267 * _tmp487 +
                      _tmp268 * _tmp488 + _tmp269 * _tmp489 + _tmp664;
    _hessian(18, 1) = -_tmp260 * _tmp490 + _tmp261 * _tmp491 + _tmp265 * _tmp492 +
                      _tmp267 * _tmp493 + _tmp268 * _tmp494 + _tmp269 * _tmp495;
    _hessian(19, 1) = -_tmp260 * _tmp496 + _tmp261 * _tmp497 + _tmp265 * _tmp498 +
                      _tmp267 * _tmp499 + _tmp268 * _tmp500 + _tmp269 * _tmp501;
    _hessian(20, 1) = -_tmp260 * _tmp502 + _tmp261 * _tmp503 + _tmp265 * _tmp504 +
                      _tmp267 * _tmp505 + _tmp268 * _tmp506 + _tmp269 * _tmp507;
    _hessian(21, 1) = _tmp243 * _tmp556 + _tmp248 * _tmp560 + _tmp250 * _tmp562 +
                      _tmp260 * _tmp564 + _tmp261 * _tmp566 + _tmp265 * _tmp567 +
                      _tmp267 * _tmp568 + _tmp268 * _tmp569 + _tmp269 * _tmp570;
    _hessian(22, 1) = _tmp243 * _tmp587 + _tmp248 * _tmp593 + _tmp250 * _tmp596 +
                      _tmp260 * _tmp597 + _tmp261 * _tmp598 + _tmp265 * _tmp599 +
                      _tmp267 * _tmp600 + _tmp268 * _tmp601 + _tmp269 * _tmp602;
    _hessian(23, 1) = _tmp243 * _tmp621 + _tmp248 * _tmp625 + _tmp250 * _tmp627 +
                      _tmp260 * _tmp629 + _tmp261 * _tmp630 + _tmp265 * _tmp631 +
                      _tmp267 * _tmp632 + _tmp268 * _tmp633 + _tmp269 * _tmp634;
    _hessian(24, 1) = -_tmp260 * _tmp635 + _tmp261 * _tmp636 + _tmp265 * _tmp637 +
                      _tmp267 * _tmp638 + _tmp268 * _tmp639 + _tmp269 * _tmp640;
    _hessian(25, 1) = -_tmp260 * _tmp641 + _tmp261 * _tmp642 + _tmp265 * _tmp643 +
                      _tmp267 * _tmp644 + _tmp268 * _tmp645 + _tmp269 * _tmp646;
    _hessian(26, 1) = -_tmp260 * _tmp647 + _tmp261 * _tmp648 + _tmp265 * _tmp649 +
                      _tmp267 * _tmp650 + _tmp268 * _tmp651 + _tmp269 * _tmp652;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp280, Scalar(2)) + std::pow(_tmp285, Scalar(2)) + std::pow(_tmp287, Scalar(2)) +
        std::pow(_tmp291, Scalar(2)) + std::pow(_tmp296, Scalar(2)) + std::pow(_tmp297, Scalar(2)) +
        std::pow(_tmp299, Scalar(2)) + std::pow(_tmp301, Scalar(2)) + std::pow(_tmp302, Scalar(2));
    _hessian(3, 2) = _tmp301 * _tmp306 + _tmp302 * _tmp310 - _tmp665;
    _hessian(4, 2) = _tmp301 * _tmp314 + _tmp302 * _tmp318 - _tmp666;
    _hessian(5, 2) = _tmp301 * _tmp322 + _tmp302 * _tmp326 - _tmp667;
    _hessian(6, 2) = _tmp296 * _tmp330 + _tmp297 * _tmp334 + _tmp299 * _tmp338 + _tmp301 * _tmp342 +
                     _tmp302 * _tmp346 - _tmp668;
    _hessian(7, 2) = _tmp296 * _tmp350 + _tmp297 * _tmp354 + _tmp299 * _tmp358 + _tmp301 * _tmp362 +
                     _tmp302 * _tmp366 - _tmp669;
    _hessian(8, 2) = _tmp296 * _tmp370 + _tmp297 * _tmp374 + _tmp299 * _tmp378 + _tmp301 * _tmp382 +
                     _tmp302 * _tmp386 - _tmp670;
    _hessian(9, 2) = _tmp280 * _tmp399 + _tmp285 * _tmp410 + _tmp287 * _tmp417 + _tmp291 * _tmp422 +
                     _tmp296 * _tmp424 + _tmp297 * _tmp425 + _tmp299 * _tmp426 + _tmp301 * _tmp427 +
                     _tmp302 * _tmp428;
    _hessian(10, 2) = _tmp280 * _tmp433 + _tmp285 * _tmp437 + _tmp287 * _tmp440 +
                      _tmp291 * _tmp443 + _tmp296 * _tmp445 + _tmp297 * _tmp446 +
                      _tmp299 * _tmp448 + _tmp301 * _tmp449 + _tmp302 * _tmp450;
    _hessian(11, 2) = _tmp280 * _tmp454 + _tmp285 * _tmp458 + _tmp287 * _tmp459 +
                      _tmp291 * _tmp463 + _tmp296 * _tmp464 + _tmp297 * _tmp465 +
                      _tmp299 * _tmp466 + _tmp301 * _tmp467 + _tmp302 * _tmp468;
    _hessian(12, 2) = _tmp301 * _tmp469 + _tmp302 * _tmp470 + _tmp665;
    _hessian(13, 2) = _tmp301 * _tmp471 + _tmp302 * _tmp472 + _tmp666;
    _hessian(14, 2) = _tmp301 * _tmp473 + _tmp302 * _tmp474 + _tmp667;
    _hessian(15, 2) = _tmp296 * _tmp475 + _tmp297 * _tmp476 + _tmp299 * _tmp477 +
                      _tmp301 * _tmp478 + _tmp302 * _tmp479 + _tmp668;
    _hessian(16, 2) = _tmp296 * _tmp480 + _tmp297 * _tmp481 + _tmp299 * _tmp482 +
                      _tmp301 * _tmp483 + _tmp302 * _tmp484 + _tmp669;
    _hessian(17, 2) = _tmp296 * _tmp485 + _tmp297 * _tmp486 + _tmp299 * _tmp487 +
                      _tmp301 * _tmp488 + _tmp302 * _tmp489 + _tmp670;
    _hessian(18, 2) = -_tmp291 * _tmp490 + _tmp296 * _tmp491 + _tmp297 * _tmp492 +
                      _tmp299 * _tmp493 + _tmp301 * _tmp494 + _tmp302 * _tmp495;
    _hessian(19, 2) = -_tmp291 * _tmp496 + _tmp296 * _tmp497 + _tmp297 * _tmp498 +
                      _tmp299 * _tmp499 + _tmp301 * _tmp500 + _tmp302 * _tmp501;
    _hessian(20, 2) = -_tmp291 * _tmp502 + _tmp296 * _tmp503 + _tmp297 * _tmp504 +
                      _tmp299 * _tmp505 + _tmp301 * _tmp506 + _tmp302 * _tmp507;
    _hessian(21, 2) = _tmp280 * _tmp556 + _tmp285 * _tmp560 + _tmp287 * _tmp562 +
                      _tmp291 * _tmp564 + _tmp296 * _tmp566 + _tmp297 * _tmp567 +
                      _tmp299 * _tmp568 + _tmp301 * _tmp569 + _tmp302 * _tmp570;
    _hessian(22, 2) = _tmp280 * _tmp587 + _tmp285 * _tmp593 + _tmp287 * _tmp596 +
                      _tmp291 * _tmp597 + _tmp296 * _tmp598 + _tmp297 * _tmp599 +
                      _tmp299 * _tmp600 + _tmp301 * _tmp601 + _tmp302 * _tmp602;
    _hessian(23, 2) = _tmp280 * _tmp621 + _tmp285 * _tmp625 + _tmp287 * _tmp627 +
                      _tmp291 * _tmp629 + _tmp296 * _tmp630 + _tmp297 * _tmp631 +
                      _tmp299 * _tmp632 + _tmp301 * _tmp633 + _tmp302 * _tmp634;
    _hessian(24, 2) = _tmp296 * _tmp636 + _tmp297 * _tmp637 + _tmp299 * _tmp638 +
                      _tmp301 * _tmp639 + _tmp302 * _tmp640 - _tmp668 * dt;
    _hessian(25, 2) = _tmp296 * _tmp642 + _tmp297 * _tmp643 + _tmp299 * _tmp644 +
                      _tmp301 * _tmp645 + _tmp302 * _tmp646 - _tmp669 * dt;
    _hessian(26, 2) = _tmp296 * _tmp648 + _tmp297 * _tmp649 + _tmp299 * _tmp650 +
                      _tmp301 * _tmp651 + _tmp302 * _tmp652 - _tmp670 * dt;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp306, Scalar(2)) + std::pow(_tmp310, Scalar(2)) + _tmp673;
    _hessian(4, 3) = _tmp306 * _tmp314 + _tmp310 * _tmp318 + _tmp675;
    _hessian(5, 3) = _tmp306 * _tmp322 + _tmp310 * _tmp326 + _tmp677;
    _hessian(6, 3) = _tmp306 * _tmp342 + _tmp310 * _tmp346 - _tmp678;
    _hessian(7, 3) = _tmp306 * _tmp362 + _tmp310 * _tmp366 - _tmp679;
    _hessian(8, 3) = _tmp306 * _tmp382 + _tmp310 * _tmp386 - _tmp680;
    _hessian(9, 3) = _tmp306 * _tmp427 + _tmp310 * _tmp428 - _tmp681;
    _hessian(10, 3) = _tmp306 * _tmp449 + _tmp310 * _tmp450 - _tmp682;
    _hessian(11, 3) = _tmp306 * _tmp467 + _tmp310 * _tmp468 - _tmp683;
    _hessian(12, 3) = _tmp306 * _tmp469 + _tmp310 * _tmp470 - _tmp673;
    _hessian(13, 3) = _tmp306 * _tmp471 + _tmp310 * _tmp472 + _tmp684;
    _hessian(14, 3) = _tmp306 * _tmp473 + _tmp310 * _tmp474 + _tmp685;
    _hessian(15, 3) = _tmp306 * _tmp478 + _tmp310 * _tmp479 - _tmp686;
    _hessian(16, 3) = _tmp306 * _tmp483 + _tmp310 * _tmp484 - _tmp687;
    _hessian(17, 3) = _tmp306 * _tmp488 + _tmp310 * _tmp489 - _tmp688;
    _hessian(18, 3) = _tmp306 * _tmp494 + _tmp310 * _tmp495 - _tmp689;
    _hessian(19, 3) = _tmp306 * _tmp500 + _tmp310 * _tmp501 - _tmp690;
    _hessian(20, 3) = _tmp306 * _tmp506 + _tmp310 * _tmp507 - _tmp691;
    _hessian(21, 3) = _tmp306 * _tmp569 + _tmp310 * _tmp570 - _tmp692;
    _hessian(22, 3) = _tmp306 * _tmp601 + _tmp310 * _tmp602 - _tmp693;
    _hessian(23, 3) = _tmp306 * _tmp633 + _tmp310 * _tmp634 - _tmp694;
    _hessian(24, 3) = _tmp306 * _tmp639 + _tmp310 * _tmp640 - _tmp695;
    _hessian(25, 3) = _tmp306 * _tmp645 + _tmp310 * _tmp646 - _tmp696;
    _hessian(26, 3) = _tmp306 * _tmp651 + _tmp310 * _tmp652 - _tmp697;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp314, Scalar(2)) + std::pow(_tmp318, Scalar(2)) + _tmp699;
    _hessian(5, 4) = _tmp314 * _tmp322 + _tmp318 * _tmp326 + _tmp700;
    _hessian(6, 4) = _tmp314 * _tmp342 + _tmp318 * _tmp346 - _tmp701;
    _hessian(7, 4) = _tmp314 * _tmp362 + _tmp318 * _tmp366 - _tmp702;
    _hessian(8, 4) = _tmp314 * _tmp382 + _tmp318 * _tmp386 - _tmp703;
    _hessian(9, 4) = _tmp314 * _tmp427 + _tmp318 * _tmp428 - _tmp704;
    _hessian(10, 4) = _tmp314 * _tmp449 + _tmp318 * _tmp450 - _tmp705;
    _hessian(11, 4) = _tmp314 * _tmp467 + _tmp318 * _tmp468 - _tmp706;
    _hessian(12, 4) = _tmp314 * _tmp469 + _tmp318 * _tmp470 + _tmp684;
    _hessian(13, 4) = _tmp314 * _tmp471 + _tmp318 * _tmp472 - _tmp699;
    _hessian(14, 4) = _tmp314 * _tmp473 + _tmp318 * _tmp474 + _tmp707;
    _hessian(15, 4) = _tmp314 * _tmp478 + _tmp318 * _tmp479 - _tmp708;
    _hessian(16, 4) = _tmp314 * _tmp483 + _tmp318 * _tmp484 - _tmp709;
    _hessian(17, 4) = _tmp314 * _tmp488 + _tmp318 * _tmp489 - _tmp710;
    _hessian(18, 4) = _tmp314 * _tmp494 + _tmp318 * _tmp495 - _tmp711;
    _hessian(19, 4) = _tmp314 * _tmp500 + _tmp318 * _tmp501 - _tmp712;
    _hessian(20, 4) = _tmp314 * _tmp506 + _tmp318 * _tmp507 - _tmp713;
    _hessian(21, 4) = _tmp314 * _tmp569 + _tmp318 * _tmp570 - _tmp714;
    _hessian(22, 4) = _tmp314 * _tmp601 + _tmp318 * _tmp602 - _tmp715;
    _hessian(23, 4) = _tmp314 * _tmp633 + _tmp318 * _tmp634 - _tmp716;
    _hessian(24, 4) = _tmp314 * _tmp639 + _tmp318 * _tmp640 - _tmp717;
    _hessian(25, 4) = _tmp314 * _tmp645 + _tmp318 * _tmp646 - _tmp718;
    _hessian(26, 4) = _tmp314 * _tmp651 + _tmp318 * _tmp652 - _tmp719;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp322, Scalar(2)) + std::pow(_tmp326, Scalar(2)) + _tmp721;
    _hessian(6, 5) = _tmp322 * _tmp342 + _tmp326 * _tmp346 - _tmp722;
    _hessian(7, 5) = _tmp322 * _tmp362 + _tmp326 * _tmp366 - _tmp723;
    _hessian(8, 5) = _tmp322 * _tmp382 + _tmp326 * _tmp386 - _tmp724;
    _hessian(9, 5) = _tmp322 * _tmp427 + _tmp326 * _tmp428 - _tmp725;
    _hessian(10, 5) = _tmp322 * _tmp449 + _tmp326 * _tmp450 - _tmp726;
    _hessian(11, 5) = _tmp322 * _tmp467 + _tmp326 * _tmp468 - _tmp727;
    _hessian(12, 5) = _tmp322 * _tmp469 + _tmp326 * _tmp470 + _tmp685;
    _hessian(13, 5) = _tmp322 * _tmp471 + _tmp326 * _tmp472 + _tmp707;
    _hessian(14, 5) = _tmp322 * _tmp473 + _tmp326 * _tmp474 - _tmp721;
    _hessian(15, 5) = _tmp322 * _tmp478 + _tmp326 * _tmp479 - _tmp728;
    _hessian(16, 5) = _tmp322 * _tmp483 + _tmp326 * _tmp484 - _tmp729;
    _hessian(17, 5) = _tmp322 * _tmp488 + _tmp326 * _tmp489 - _tmp730;
    _hessian(18, 5) = _tmp322 * _tmp494 + _tmp326 * _tmp495 - _tmp731;
    _hessian(19, 5) = _tmp322 * _tmp500 + _tmp326 * _tmp501 - _tmp732;
    _hessian(20, 5) = _tmp322 * _tmp506 + _tmp326 * _tmp507 - _tmp733;
    _hessian(21, 5) = _tmp322 * _tmp569 + _tmp326 * _tmp570 - _tmp734;
    _hessian(22, 5) = _tmp322 * _tmp601 + _tmp326 * _tmp602 - _tmp735;
    _hessian(23, 5) = _tmp322 * _tmp633 + _tmp326 * _tmp634 - _tmp736;
    _hessian(24, 5) = _tmp322 * _tmp639 + _tmp326 * _tmp640 - _tmp737;
    _hessian(25, 5) = _tmp322 * _tmp645 + _tmp326 * _tmp646 - _tmp738;
    _hessian(26, 5) = _tmp322 * _tmp651 + _tmp326 * _tmp652 - _tmp739;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp330, Scalar(2)) + std::pow(_tmp334, Scalar(2)) +
                     std::pow(_tmp338, Scalar(2)) + std::pow(_tmp342, Scalar(2)) +
                     std::pow(_tmp346, Scalar(2)) + _tmp741;
    _hessian(7, 6) = _tmp330 * _tmp350 + _tmp334 * _tmp354 + _tmp338 * _tmp358 + _tmp342 * _tmp362 +
                     _tmp346 * _tmp366 + _tmp743;
    _hessian(8, 6) = _tmp330 * _tmp370 + _tmp334 * _tmp374 + _tmp338 * _tmp378 + _tmp342 * _tmp382 +
                     _tmp346 * _tmp386 + _tmp744;
    _hessian(9, 6) = _tmp330 * _tmp424 + _tmp334 * _tmp425 + _tmp338 * _tmp426 + _tmp342 * _tmp427 +
                     _tmp346 * _tmp428 - _tmp745;
    _hessian(10, 6) = _tmp330 * _tmp445 + _tmp334 * _tmp446 + _tmp338 * _tmp448 +
                      _tmp342 * _tmp449 + _tmp346 * _tmp450 - _tmp746;
    _hessian(11, 6) = _tmp330 * _tmp464 + _tmp334 * _tmp465 + _tmp338 * _tmp466 +
                      _tmp342 * _tmp467 + _tmp346 * _tmp468 - _tmp747;
    _hessian(12, 6) = _tmp342 * _tmp469 + _tmp346 * _tmp470 + _tmp678;
    _hessian(13, 6) = _tmp342 * _tmp471 + _tmp346 * _tmp472 + _tmp701;
    _hessian(14, 6) = _tmp342 * _tmp473 + _tmp346 * _tmp474 + _tmp722;
    _hessian(15, 6) = _tmp330 * _tmp475 + _tmp334 * _tmp476 + _tmp338 * _tmp477 +
                      _tmp342 * _tmp478 + _tmp346 * _tmp479 - _tmp741;
    _hessian(16, 6) = _tmp330 * _tmp480 + _tmp334 * _tmp481 + _tmp338 * _tmp482 +
                      _tmp342 * _tmp483 + _tmp346 * _tmp484 + _tmp748;
    _hessian(17, 6) = _tmp330 * _tmp485 + _tmp334 * _tmp486 + _tmp338 * _tmp487 +
                      _tmp342 * _tmp488 + _tmp346 * _tmp489 + _tmp749;
    _hessian(18, 6) = _tmp330 * _tmp491 + _tmp334 * _tmp492 + _tmp338 * _tmp493 +
                      _tmp342 * _tmp494 + _tmp346 * _tmp495 + _tmp751;
    _hessian(19, 6) = _tmp330 * _tmp497 + _tmp334 * _tmp498 + _tmp338 * _tmp499 +
                      _tmp342 * _tmp500 + _tmp346 * _tmp501 + _tmp753;
    _hessian(20, 6) = _tmp330 * _tmp503 + _tmp334 * _tmp504 + _tmp338 * _tmp505 +
                      _tmp342 * _tmp506 + _tmp346 * _tmp507 + _tmp754;
    _hessian(21, 6) = _tmp330 * _tmp566 + _tmp334 * _tmp567 + _tmp338 * _tmp568 +
                      _tmp342 * _tmp569 + _tmp346 * _tmp570 - _tmp755;
    _hessian(22, 6) = _tmp330 * _tmp598 + _tmp334 * _tmp599 + _tmp338 * _tmp600 +
                      _tmp342 * _tmp601 + _tmp346 * _tmp602 - _tmp756;
    _hessian(23, 6) = _tmp330 * _tmp630 + _tmp334 * _tmp631 + _tmp338 * _tmp632 +
                      _tmp342 * _tmp633 + _tmp346 * _tmp634 - _tmp757;
    _hessian(24, 6) = _tmp330 * _tmp636 + _tmp334 * _tmp637 + _tmp338 * _tmp638 +
                      _tmp342 * _tmp639 + _tmp346 * _tmp640 + _tmp758;
    _hessian(25, 6) = _tmp330 * _tmp642 + _tmp334 * _tmp643 + _tmp338 * _tmp644 +
                      _tmp342 * _tmp645 + _tmp346 * _tmp646 + _tmp759;
    _hessian(26, 6) = _tmp330 * _tmp648 + _tmp334 * _tmp649 + _tmp338 * _tmp650 +
                      _tmp342 * _tmp651 + _tmp346 * _tmp652 + _tmp760;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp350, Scalar(2)) + std::pow(_tmp354, Scalar(2)) +
                     std::pow(_tmp358, Scalar(2)) + std::pow(_tmp362, Scalar(2)) +
                     std::pow(_tmp366, Scalar(2)) + _tmp761;
    _hessian(8, 7) = _tmp350 * _tmp370 + _tmp354 * _tmp374 + _tmp358 * _tmp378 + _tmp362 * _tmp382 +
                     _tmp366 * _tmp386 + _tmp762;
    _hessian(9, 7) = _tmp350 * _tmp424 + _tmp354 * _tmp425 + _tmp358 * _tmp426 + _tmp362 * _tmp427 +
                     _tmp366 * _tmp428 - _tmp763;
    _hessian(10, 7) = _tmp350 * _tmp445 + _tmp354 * _tmp446 + _tmp358 * _tmp448 +
                      _tmp362 * _tmp449 + _tmp366 * _tmp450 - _tmp764;
    _hessian(11, 7) = _tmp350 * _tmp464 + _tmp354 * _tmp465 + _tmp358 * _tmp466 +
                      _tmp362 * _tmp467 + _tmp366 * _tmp468 - _tmp765;
    _hessian(12, 7) = _tmp362 * _tmp469 + _tmp366 * _tmp470 + _tmp679;
    _hessian(13, 7) = _tmp362 * _tmp471 + _tmp366 * _tmp472 + _tmp702;
    _hessian(14, 7) = _tmp362 * _tmp473 + _tmp366 * _tmp474 + _tmp723;
    _hessian(15, 7) = _tmp350 * _tmp475 + _tmp354 * _tmp476 + _tmp358 * _tmp477 +
                      _tmp362 * _tmp478 + _tmp366 * _tmp479 + _tmp748;
    _hessian(16, 7) = _tmp350 * _tmp480 + _tmp354 * _tmp481 + _tmp358 * _tmp482 +
                      _tmp362 * _tmp483 + _tmp366 * _tmp484 - _tmp761;
    _hessian(17, 7) = _tmp350 * _tmp485 + _tmp354 * _tmp486 + _tmp358 * _tmp487 +
                      _tmp362 * _tmp488 + _tmp366 * _tmp489 + _tmp766;
    _hessian(18, 7) = _tmp350 * _tmp491 + _tmp354 * _tmp492 + _tmp358 * _tmp493 +
                      _tmp362 * _tmp494 + _tmp366 * _tmp495 + _tmp767;
    _hessian(19, 7) = _tmp350 * _tmp497 + _tmp354 * _tmp498 + _tmp358 * _tmp499 +
                      _tmp362 * _tmp500 + _tmp366 * _tmp501 + _tmp768;
    _hessian(20, 7) = _tmp350 * _tmp503 + _tmp354 * _tmp504 + _tmp358 * _tmp505 +
                      _tmp362 * _tmp506 + _tmp366 * _tmp507 + _tmp769;
    _hessian(21, 7) = _tmp350 * _tmp566 + _tmp354 * _tmp567 + _tmp358 * _tmp568 +
                      _tmp362 * _tmp569 + _tmp366 * _tmp570 - _tmp770;
    _hessian(22, 7) = _tmp350 * _tmp598 + _tmp354 * _tmp599 + _tmp358 * _tmp600 +
                      _tmp362 * _tmp601 + _tmp366 * _tmp602 - _tmp771;
    _hessian(23, 7) = _tmp350 * _tmp630 + _tmp354 * _tmp631 + _tmp358 * _tmp632 +
                      _tmp362 * _tmp633 + _tmp366 * _tmp634 - _tmp772;
    _hessian(24, 7) = _tmp350 * _tmp636 + _tmp354 * _tmp637 + _tmp358 * _tmp638 +
                      _tmp362 * _tmp639 + _tmp366 * _tmp640 + _tmp759;
    _hessian(25, 7) = _tmp350 * _tmp642 + _tmp354 * _tmp643 + _tmp358 * _tmp644 +
                      _tmp362 * _tmp645 + _tmp366 * _tmp646 + _tmp773;
    _hessian(26, 7) = _tmp350 * _tmp648 + _tmp354 * _tmp649 + _tmp358 * _tmp650 +
                      _tmp362 * _tmp651 + _tmp366 * _tmp652 + _tmp774;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp370, Scalar(2)) + std::pow(_tmp374, Scalar(2)) +
                     std::pow(_tmp378, Scalar(2)) + std::pow(_tmp382, Scalar(2)) +
                     std::pow(_tmp386, Scalar(2)) + _tmp775;
    _hessian(9, 8) = _tmp370 * _tmp424 + _tmp374 * _tmp425 + _tmp378 * _tmp426 + _tmp382 * _tmp427 +
                     _tmp386 * _tmp428 - _tmp776;
    _hessian(10, 8) = _tmp370 * _tmp445 + _tmp374 * _tmp446 + _tmp378 * _tmp448 +
                      _tmp382 * _tmp449 + _tmp386 * _tmp450 - _tmp777;
    _hessian(11, 8) = _tmp370 * _tmp464 + _tmp374 * _tmp465 + _tmp378 * _tmp466 +
                      _tmp382 * _tmp467 + _tmp386 * _tmp468 - _tmp778;
    _hessian(12, 8) = _tmp382 * _tmp469 + _tmp386 * _tmp470 + _tmp680;
    _hessian(13, 8) = _tmp382 * _tmp471 + _tmp386 * _tmp472 + _tmp703;
    _hessian(14, 8) = _tmp382 * _tmp473 + _tmp386 * _tmp474 + _tmp724;
    _hessian(15, 8) = _tmp370 * _tmp475 + _tmp374 * _tmp476 + _tmp378 * _tmp477 +
                      _tmp382 * _tmp478 + _tmp386 * _tmp479 + _tmp749;
    _hessian(16, 8) = _tmp370 * _tmp480 + _tmp374 * _tmp481 + _tmp378 * _tmp482 +
                      _tmp382 * _tmp483 + _tmp386 * _tmp484 + _tmp766;
    _hessian(17, 8) = _tmp370 * _tmp485 + _tmp374 * _tmp486 + _tmp378 * _tmp487 +
                      _tmp382 * _tmp488 + _tmp386 * _tmp489 - _tmp775;
    _hessian(18, 8) = _tmp370 * _tmp491 + _tmp374 * _tmp492 + _tmp378 * _tmp493 +
                      _tmp382 * _tmp494 + _tmp386 * _tmp495 + _tmp779;
    _hessian(19, 8) = _tmp370 * _tmp497 + _tmp374 * _tmp498 + _tmp378 * _tmp499 +
                      _tmp382 * _tmp500 + _tmp386 * _tmp501 + _tmp781;
    _hessian(20, 8) = _tmp370 * _tmp503 + _tmp374 * _tmp504 + _tmp378 * _tmp505 +
                      _tmp382 * _tmp506 + _tmp386 * _tmp507 + _tmp782;
    _hessian(21, 8) = _tmp370 * _tmp566 + _tmp374 * _tmp567 + _tmp378 * _tmp568 +
                      _tmp382 * _tmp569 + _tmp386 * _tmp570 - _tmp783;
    _hessian(22, 8) = _tmp370 * _tmp598 + _tmp374 * _tmp599 + _tmp378 * _tmp600 +
                      _tmp382 * _tmp601 + _tmp386 * _tmp602 - _tmp784;
    _hessian(23, 8) = _tmp370 * _tmp630 + _tmp374 * _tmp631 + _tmp378 * _tmp632 +
                      _tmp382 * _tmp633 + _tmp386 * _tmp634 - _tmp785;
    _hessian(24, 8) = _tmp370 * _tmp636 + _tmp374 * _tmp637 + _tmp378 * _tmp638 +
                      _tmp382 * _tmp639 + _tmp386 * _tmp640 + _tmp760;
    _hessian(25, 8) = _tmp370 * _tmp642 + _tmp374 * _tmp643 + _tmp378 * _tmp644 +
                      _tmp382 * _tmp645 + _tmp386 * _tmp646 + _tmp774;
    _hessian(26, 8) = _tmp370 * _tmp648 + _tmp374 * _tmp649 + _tmp378 * _tmp650 +
                      _tmp382 * _tmp651 + _tmp386 * _tmp652 + _tmp786;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) =
        std::pow(_tmp399, Scalar(2)) + std::pow(_tmp410, Scalar(2)) + std::pow(_tmp417, Scalar(2)) +
        std::pow(_tmp422, Scalar(2)) + std::pow(_tmp424, Scalar(2)) + std::pow(_tmp425, Scalar(2)) +
        std::pow(_tmp426, Scalar(2)) + std::pow(_tmp427, Scalar(2)) + std::pow(_tmp428, Scalar(2));
    _hessian(10, 9) = _tmp399 * _tmp433 + _tmp410 * _tmp437 + _tmp417 * _tmp440 +
                      _tmp422 * _tmp443 + _tmp424 * _tmp445 + _tmp425 * _tmp446 +
                      _tmp426 * _tmp448 + _tmp427 * _tmp449 + _tmp428 * _tmp450;
    _hessian(11, 9) = _tmp399 * _tmp454 + _tmp410 * _tmp458 + _tmp417 * _tmp459 +
                      _tmp422 * _tmp463 + _tmp424 * _tmp464 + _tmp425 * _tmp465 +
                      _tmp426 * _tmp466 + _tmp427 * _tmp467 + _tmp428 * _tmp468;
    _hessian(12, 9) = _tmp427 * _tmp469 + _tmp428 * _tmp470 + _tmp681;
    _hessian(13, 9) = _tmp427 * _tmp471 + _tmp428 * _tmp472 + _tmp704;
    _hessian(14, 9) = _tmp427 * _tmp473 + _tmp428 * _tmp474 + _tmp725;
    _hessian(15, 9) = _tmp424 * _tmp475 + _tmp425 * _tmp476 + _tmp426 * _tmp477 +
                      _tmp427 * _tmp478 + _tmp428 * _tmp479 + _tmp745;
    _hessian(16, 9) = _tmp424 * _tmp480 + _tmp425 * _tmp481 + _tmp426 * _tmp482 +
                      _tmp427 * _tmp483 + _tmp428 * _tmp484 + _tmp763;
    _hessian(17, 9) = _tmp424 * _tmp485 + _tmp425 * _tmp486 + _tmp426 * _tmp487 +
                      _tmp427 * _tmp488 + _tmp428 * _tmp489 + _tmp776;
    _hessian(18, 9) = -_tmp422 * _tmp490 + _tmp424 * _tmp491 + _tmp425 * _tmp492 +
                      _tmp426 * _tmp493 + _tmp427 * _tmp494 + _tmp428 * _tmp495;
    _hessian(19, 9) = -_tmp422 * _tmp496 + _tmp424 * _tmp497 + _tmp425 * _tmp498 +
                      _tmp426 * _tmp499 + _tmp427 * _tmp500 + _tmp428 * _tmp501;
    _hessian(20, 9) = -_tmp422 * _tmp502 + _tmp424 * _tmp503 + _tmp425 * _tmp504 +
                      _tmp426 * _tmp505 + _tmp427 * _tmp506 + _tmp428 * _tmp507;
    _hessian(21, 9) = _tmp399 * _tmp556 + _tmp410 * _tmp560 + _tmp417 * _tmp562 +
                      _tmp422 * _tmp564 + _tmp424 * _tmp566 + _tmp425 * _tmp567 +
                      _tmp426 * _tmp568 + _tmp427 * _tmp569 + _tmp428 * _tmp570;
    _hessian(22, 9) = _tmp399 * _tmp587 + _tmp410 * _tmp593 + _tmp417 * _tmp596 +
                      _tmp422 * _tmp597 + _tmp424 * _tmp598 + _tmp425 * _tmp599 +
                      _tmp426 * _tmp600 + _tmp427 * _tmp601 + _tmp428 * _tmp602;
    _hessian(23, 9) = _tmp399 * _tmp621 + _tmp410 * _tmp625 + _tmp417 * _tmp627 +
                      _tmp422 * _tmp629 + _tmp424 * _tmp630 + _tmp425 * _tmp631 +
                      _tmp426 * _tmp632 + _tmp427 * _tmp633 + _tmp428 * _tmp634;
    _hessian(24, 9) = _tmp424 * _tmp636 + _tmp425 * _tmp637 + _tmp426 * _tmp638 +
                      _tmp427 * _tmp639 + _tmp428 * _tmp640 - _tmp745 * dt;
    _hessian(25, 9) = -_tmp422 * _tmp641 + _tmp424 * _tmp642 + _tmp425 * _tmp643 +
                      _tmp426 * _tmp644 + _tmp427 * _tmp645 + _tmp428 * _tmp646;
    _hessian(26, 9) = -_tmp422 * _tmp647 + _tmp424 * _tmp648 + _tmp425 * _tmp649 +
                      _tmp426 * _tmp650 + _tmp427 * _tmp651 + _tmp428 * _tmp652;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) =
        std::pow(_tmp433, Scalar(2)) + std::pow(_tmp437, Scalar(2)) + std::pow(_tmp440, Scalar(2)) +
        std::pow(_tmp443, Scalar(2)) + std::pow(_tmp445, Scalar(2)) + std::pow(_tmp446, Scalar(2)) +
        std::pow(_tmp448, Scalar(2)) + std::pow(_tmp449, Scalar(2)) + std::pow(_tmp450, Scalar(2));
    _hessian(11, 10) = _tmp433 * _tmp454 + _tmp437 * _tmp458 + _tmp440 * _tmp459 +
                       _tmp443 * _tmp463 + _tmp445 * _tmp464 + _tmp446 * _tmp465 +
                       _tmp448 * _tmp466 + _tmp449 * _tmp467 + _tmp450 * _tmp468;
    _hessian(12, 10) = _tmp449 * _tmp469 + _tmp450 * _tmp470 + _tmp682;
    _hessian(13, 10) = _tmp449 * _tmp471 + _tmp450 * _tmp472 + _tmp705;
    _hessian(14, 10) = _tmp449 * _tmp473 + _tmp450 * _tmp474 + _tmp726;
    _hessian(15, 10) = _tmp445 * _tmp475 + _tmp446 * _tmp476 + _tmp448 * _tmp477 +
                       _tmp449 * _tmp478 + _tmp450 * _tmp479 + _tmp746;
    _hessian(16, 10) = _tmp445 * _tmp480 + _tmp446 * _tmp481 + _tmp448 * _tmp482 +
                       _tmp449 * _tmp483 + _tmp450 * _tmp484 + _tmp764;
    _hessian(17, 10) = _tmp445 * _tmp485 + _tmp446 * _tmp486 + _tmp448 * _tmp487 +
                       _tmp449 * _tmp488 + _tmp450 * _tmp489 + _tmp777;
    _hessian(18, 10) = -_tmp443 * _tmp490 + _tmp445 * _tmp491 + _tmp446 * _tmp492 +
                       _tmp448 * _tmp493 + _tmp449 * _tmp494 + _tmp450 * _tmp495;
    _hessian(19, 10) = -_tmp443 * _tmp496 + _tmp445 * _tmp497 + _tmp446 * _tmp498 +
                       _tmp448 * _tmp499 + _tmp449 * _tmp500 + _tmp450 * _tmp501;
    _hessian(20, 10) = -_tmp443 * _tmp502 + _tmp445 * _tmp503 + _tmp446 * _tmp504 +
                       _tmp448 * _tmp505 + _tmp449 * _tmp506 + _tmp450 * _tmp507;
    _hessian(21, 10) = _tmp433 * _tmp556 + _tmp437 * _tmp560 + _tmp440 * _tmp562 +
                       _tmp443 * _tmp564 + _tmp445 * _tmp566 + _tmp446 * _tmp567 +
                       _tmp448 * _tmp568 + _tmp449 * _tmp569 + _tmp450 * _tmp570;
    _hessian(22, 10) = _tmp433 * _tmp587 + _tmp437 * _tmp593 + _tmp440 * _tmp596 +
                       _tmp443 * _tmp597 + _tmp445 * _tmp598 + _tmp446 * _tmp599 +
                       _tmp448 * _tmp600 + _tmp449 * _tmp601 + _tmp450 * _tmp602;
    _hessian(23, 10) = _tmp433 * _tmp621 + _tmp437 * _tmp625 + _tmp440 * _tmp627 +
                       _tmp443 * _tmp629 + _tmp445 * _tmp630 + _tmp446 * _tmp631 +
                       _tmp448 * _tmp632 + _tmp449 * _tmp633 + _tmp450 * _tmp634;
    _hessian(24, 10) = _tmp445 * _tmp636 + _tmp446 * _tmp637 + _tmp448 * _tmp638 +
                       _tmp449 * _tmp639 + _tmp450 * _tmp640 - _tmp746 * dt;
    _hessian(25, 10) = -_tmp443 * _tmp641 + _tmp445 * _tmp642 + _tmp446 * _tmp643 +
                       _tmp448 * _tmp644 + _tmp449 * _tmp645 + _tmp450 * _tmp646;
    _hessian(26, 10) = _tmp445 * _tmp648 + _tmp446 * _tmp649 + _tmp448 * _tmp650 +
                       _tmp449 * _tmp651 + _tmp450 * _tmp652 - _tmp777 * dt;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) =
        std::pow(_tmp454, Scalar(2)) + std::pow(_tmp458, Scalar(2)) + std::pow(_tmp459, Scalar(2)) +
        std::pow(_tmp463, Scalar(2)) + std::pow(_tmp464, Scalar(2)) + std::pow(_tmp465, Scalar(2)) +
        std::pow(_tmp466, Scalar(2)) + std::pow(_tmp467, Scalar(2)) + std::pow(_tmp468, Scalar(2));
    _hessian(12, 11) = _tmp467 * _tmp469 + _tmp468 * _tmp470 + _tmp683;
    _hessian(13, 11) = _tmp467 * _tmp471 + _tmp468 * _tmp472 + _tmp706;
    _hessian(14, 11) = _tmp467 * _tmp473 + _tmp468 * _tmp474 + _tmp727;
    _hessian(15, 11) = _tmp464 * _tmp475 + _tmp465 * _tmp476 + _tmp466 * _tmp477 +
                       _tmp467 * _tmp478 + _tmp468 * _tmp479 + _tmp747;
    _hessian(16, 11) = _tmp464 * _tmp480 + _tmp465 * _tmp481 + _tmp466 * _tmp482 +
                       _tmp467 * _tmp483 + _tmp468 * _tmp484 + _tmp765;
    _hessian(17, 11) = _tmp464 * _tmp485 + _tmp465 * _tmp486 + _tmp466 * _tmp487 +
                       _tmp467 * _tmp488 + _tmp468 * _tmp489 + _tmp778;
    _hessian(18, 11) = -_tmp463 * _tmp490 + _tmp464 * _tmp491 + _tmp465 * _tmp492 +
                       _tmp466 * _tmp493 + _tmp467 * _tmp494 + _tmp468 * _tmp495;
    _hessian(19, 11) = -_tmp463 * _tmp496 + _tmp464 * _tmp497 + _tmp465 * _tmp498 +
                       _tmp466 * _tmp499 + _tmp467 * _tmp500 + _tmp468 * _tmp501;
    _hessian(20, 11) = -_tmp463 * _tmp502 + _tmp464 * _tmp503 + _tmp465 * _tmp504 +
                       _tmp466 * _tmp505 + _tmp467 * _tmp506 + _tmp468 * _tmp507;
    _hessian(21, 11) = _tmp454 * _tmp556 + _tmp458 * _tmp560 + _tmp459 * _tmp562 +
                       _tmp463 * _tmp564 + _tmp464 * _tmp566 + _tmp465 * _tmp567 +
                       _tmp466 * _tmp568 + _tmp467 * _tmp569 + _tmp468 * _tmp570;
    _hessian(22, 11) = _tmp454 * _tmp587 + _tmp458 * _tmp593 + _tmp459 * _tmp596 +
                       _tmp463 * _tmp597 + _tmp464 * _tmp598 + _tmp465 * _tmp599 +
                       _tmp466 * _tmp600 + _tmp467 * _tmp601 + _tmp468 * _tmp602;
    _hessian(23, 11) = _tmp454 * _tmp621 + _tmp458 * _tmp625 + _tmp459 * _tmp627 +
                       _tmp463 * _tmp629 + _tmp464 * _tmp630 + _tmp465 * _tmp631 +
                       _tmp466 * _tmp632 + _tmp467 * _tmp633 + _tmp468 * _tmp634;
    _hessian(24, 11) = _tmp464 * _tmp636 + _tmp465 * _tmp637 + _tmp466 * _tmp638 +
                       _tmp467 * _tmp639 + _tmp468 * _tmp640 - _tmp747 * dt;
    _hessian(25, 11) = _tmp464 * _tmp642 + _tmp465 * _tmp643 + _tmp466 * _tmp644 +
                       _tmp467 * _tmp645 + _tmp468 * _tmp646 - _tmp765 * dt;
    _hessian(26, 11) = _tmp464 * _tmp648 + _tmp465 * _tmp649 + _tmp466 * _tmp650 +
                       _tmp467 * _tmp651 + _tmp468 * _tmp652 - _tmp778 * dt;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp469, Scalar(2)) + std::pow(_tmp470, Scalar(2)) + _tmp673;
    _hessian(13, 12) = _tmp469 * _tmp471 + _tmp470 * _tmp472 + _tmp675;
    _hessian(14, 12) = _tmp469 * _tmp473 + _tmp470 * _tmp474 + _tmp677;
    _hessian(15, 12) = _tmp469 * _tmp478 + _tmp470 * _tmp479 + _tmp686;
    _hessian(16, 12) = _tmp469 * _tmp483 + _tmp470 * _tmp484 + _tmp687;
    _hessian(17, 12) = _tmp469 * _tmp488 + _tmp470 * _tmp489 + _tmp688;
    _hessian(18, 12) = _tmp469 * _tmp494 + _tmp470 * _tmp495 + _tmp689;
    _hessian(19, 12) = _tmp469 * _tmp500 + _tmp470 * _tmp501 + _tmp690;
    _hessian(20, 12) = _tmp469 * _tmp506 + _tmp470 * _tmp507 + _tmp691;
    _hessian(21, 12) = _tmp469 * _tmp569 + _tmp470 * _tmp570 + _tmp692;
    _hessian(22, 12) = _tmp469 * _tmp601 + _tmp470 * _tmp602 + _tmp693;
    _hessian(23, 12) = _tmp469 * _tmp633 + _tmp470 * _tmp634 + _tmp694;
    _hessian(24, 12) = _tmp469 * _tmp639 + _tmp470 * _tmp640 + _tmp695;
    _hessian(25, 12) = _tmp469 * _tmp645 + _tmp470 * _tmp646 + _tmp696;
    _hessian(26, 12) = _tmp469 * _tmp651 + _tmp470 * _tmp652 + _tmp697;
    _hessian(0, 13) = 0;
    _hessian(1, 13) = 0;
    _hessian(2, 13) = 0;
    _hessian(3, 13) = 0;
    _hessian(4, 13) = 0;
    _hessian(5, 13) = 0;
    _hessian(6, 13) = 0;
    _hessian(7, 13) = 0;
    _hessian(8, 13) = 0;
    _hessian(9, 13) = 0;
    _hessian(10, 13) = 0;
    _hessian(11, 13) = 0;
    _hessian(12, 13) = 0;
    _hessian(13, 13) = std::pow(_tmp471, Scalar(2)) + std::pow(_tmp472, Scalar(2)) + _tmp699;
    _hessian(14, 13) = _tmp471 * _tmp473 + _tmp472 * _tmp474 + _tmp700;
    _hessian(15, 13) = _tmp471 * _tmp478 + _tmp472 * _tmp479 + _tmp708;
    _hessian(16, 13) = _tmp471 * _tmp483 + _tmp472 * _tmp484 + _tmp709;
    _hessian(17, 13) = _tmp471 * _tmp488 + _tmp472 * _tmp489 + _tmp710;
    _hessian(18, 13) = _tmp471 * _tmp494 + _tmp472 * _tmp495 + _tmp711;
    _hessian(19, 13) = _tmp471 * _tmp500 + _tmp472 * _tmp501 + _tmp712;
    _hessian(20, 13) = _tmp471 * _tmp506 + _tmp472 * _tmp507 + _tmp713;
    _hessian(21, 13) = _tmp471 * _tmp569 + _tmp472 * _tmp570 + _tmp714;
    _hessian(22, 13) = _tmp471 * _tmp601 + _tmp472 * _tmp602 + _tmp715;
    _hessian(23, 13) = _tmp471 * _tmp633 + _tmp472 * _tmp634 + _tmp716;
    _hessian(24, 13) = _tmp471 * _tmp639 + _tmp472 * _tmp640 + _tmp717;
    _hessian(25, 13) = _tmp471 * _tmp645 + _tmp472 * _tmp646 + _tmp718;
    _hessian(26, 13) = _tmp471 * _tmp651 + _tmp472 * _tmp652 + _tmp719;
    _hessian(0, 14) = 0;
    _hessian(1, 14) = 0;
    _hessian(2, 14) = 0;
    _hessian(3, 14) = 0;
    _hessian(4, 14) = 0;
    _hessian(5, 14) = 0;
    _hessian(6, 14) = 0;
    _hessian(7, 14) = 0;
    _hessian(8, 14) = 0;
    _hessian(9, 14) = 0;
    _hessian(10, 14) = 0;
    _hessian(11, 14) = 0;
    _hessian(12, 14) = 0;
    _hessian(13, 14) = 0;
    _hessian(14, 14) = std::pow(_tmp473, Scalar(2)) + std::pow(_tmp474, Scalar(2)) + _tmp721;
    _hessian(15, 14) = _tmp473 * _tmp478 + _tmp474 * _tmp479 + _tmp728;
    _hessian(16, 14) = _tmp473 * _tmp483 + _tmp474 * _tmp484 + _tmp729;
    _hessian(17, 14) = _tmp473 * _tmp488 + _tmp474 * _tmp489 + _tmp730;
    _hessian(18, 14) = _tmp473 * _tmp494 + _tmp474 * _tmp495 + _tmp731;
    _hessian(19, 14) = _tmp473 * _tmp500 + _tmp474 * _tmp501 + _tmp732;
    _hessian(20, 14) = _tmp473 * _tmp506 + _tmp474 * _tmp507 + _tmp733;
    _hessian(21, 14) = _tmp473 * _tmp569 + _tmp474 * _tmp570 + _tmp734;
    _hessian(22, 14) = _tmp473 * _tmp601 + _tmp474 * _tmp602 + _tmp735;
    _hessian(23, 14) = _tmp473 * _tmp633 + _tmp474 * _tmp634 + _tmp736;
    _hessian(24, 14) = _tmp473 * _tmp639 + _tmp474 * _tmp640 + _tmp737;
    _hessian(25, 14) = _tmp473 * _tmp645 + _tmp474 * _tmp646 + _tmp738;
    _hessian(26, 14) = _tmp473 * _tmp651 + _tmp474 * _tmp652 + _tmp739;
    _hessian(0, 15) = 0;
    _hessian(1, 15) = 0;
    _hessian(2, 15) = 0;
    _hessian(3, 15) = 0;
    _hessian(4, 15) = 0;
    _hessian(5, 15) = 0;
    _hessian(6, 15) = 0;
    _hessian(7, 15) = 0;
    _hessian(8, 15) = 0;
    _hessian(9, 15) = 0;
    _hessian(10, 15) = 0;
    _hessian(11, 15) = 0;
    _hessian(12, 15) = 0;
    _hessian(13, 15) = 0;
    _hessian(14, 15) = 0;
    _hessian(15, 15) = std::pow(_tmp475, Scalar(2)) + std::pow(_tmp476, Scalar(2)) +
                       std::pow(_tmp477, Scalar(2)) + std::pow(_tmp478, Scalar(2)) +
                       std::pow(_tmp479, Scalar(2)) + _tmp741;
    _hessian(16, 15) = _tmp475 * _tmp480 + _tmp476 * _tmp481 + _tmp477 * _tmp482 +
                       _tmp478 * _tmp483 + _tmp479 * _tmp484 + _tmp743;
    _hessian(17, 15) = _tmp475 * _tmp485 + _tmp476 * _tmp486 + _tmp477 * _tmp487 +
                       _tmp478 * _tmp488 + _tmp479 * _tmp489 + _tmp744;
    _hessian(18, 15) = _tmp475 * _tmp491 + _tmp476 * _tmp492 + _tmp477 * _tmp493 +
                       _tmp478 * _tmp494 + _tmp479 * _tmp495 - _tmp751;
    _hessian(19, 15) = _tmp475 * _tmp497 + _tmp476 * _tmp498 + _tmp477 * _tmp499 +
                       _tmp478 * _tmp500 + _tmp479 * _tmp501 - _tmp753;
    _hessian(20, 15) = _tmp475 * _tmp503 + _tmp476 * _tmp504 + _tmp477 * _tmp505 +
                       _tmp478 * _tmp506 + _tmp479 * _tmp507 - _tmp754;
    _hessian(21, 15) = _tmp475 * _tmp566 + _tmp476 * _tmp567 + _tmp477 * _tmp568 +
                       _tmp478 * _tmp569 + _tmp479 * _tmp570 + _tmp755;
    _hessian(22, 15) = _tmp475 * _tmp598 + _tmp476 * _tmp599 + _tmp477 * _tmp600 +
                       _tmp478 * _tmp601 + _tmp479 * _tmp602 + _tmp756;
    _hessian(23, 15) = _tmp475 * _tmp630 + _tmp476 * _tmp631 + _tmp477 * _tmp632 +
                       _tmp478 * _tmp633 + _tmp479 * _tmp634 + _tmp757;
    _hessian(24, 15) = _tmp475 * _tmp636 + _tmp476 * _tmp637 + _tmp477 * _tmp638 +
                       _tmp478 * _tmp639 + _tmp479 * _tmp640 - _tmp758;
    _hessian(25, 15) = _tmp475 * _tmp642 + _tmp476 * _tmp643 + _tmp477 * _tmp644 +
                       _tmp478 * _tmp645 + _tmp479 * _tmp646 + _tmp787;
    _hessian(26, 15) = _tmp475 * _tmp648 + _tmp476 * _tmp649 + _tmp477 * _tmp650 +
                       _tmp478 * _tmp651 + _tmp479 * _tmp652 + _tmp788;
    _hessian(0, 16) = 0;
    _hessian(1, 16) = 0;
    _hessian(2, 16) = 0;
    _hessian(3, 16) = 0;
    _hessian(4, 16) = 0;
    _hessian(5, 16) = 0;
    _hessian(6, 16) = 0;
    _hessian(7, 16) = 0;
    _hessian(8, 16) = 0;
    _hessian(9, 16) = 0;
    _hessian(10, 16) = 0;
    _hessian(11, 16) = 0;
    _hessian(12, 16) = 0;
    _hessian(13, 16) = 0;
    _hessian(14, 16) = 0;
    _hessian(15, 16) = 0;
    _hessian(16, 16) = std::pow(_tmp480, Scalar(2)) + std::pow(_tmp481, Scalar(2)) +
                       std::pow(_tmp482, Scalar(2)) + std::pow(_tmp483, Scalar(2)) +
                       std::pow(_tmp484, Scalar(2)) + _tmp761;
    _hessian(17, 16) = _tmp480 * _tmp485 + _tmp481 * _tmp486 + _tmp482 * _tmp487 +
                       _tmp483 * _tmp488 + _tmp484 * _tmp489 + _tmp762;
    _hessian(18, 16) = _tmp480 * _tmp491 + _tmp481 * _tmp492 + _tmp482 * _tmp493 +
                       _tmp483 * _tmp494 + _tmp484 * _tmp495 - _tmp767;
    _hessian(19, 16) = _tmp480 * _tmp497 + _tmp481 * _tmp498 + _tmp482 * _tmp499 +
                       _tmp483 * _tmp500 + _tmp484 * _tmp501 - _tmp768;
    _hessian(20, 16) = _tmp480 * _tmp503 + _tmp481 * _tmp504 + _tmp482 * _tmp505 +
                       _tmp483 * _tmp506 + _tmp484 * _tmp507 - _tmp769;
    _hessian(21, 16) = _tmp480 * _tmp566 + _tmp481 * _tmp567 + _tmp482 * _tmp568 +
                       _tmp483 * _tmp569 + _tmp484 * _tmp570 + _tmp770;
    _hessian(22, 16) = _tmp480 * _tmp598 + _tmp481 * _tmp599 + _tmp482 * _tmp600 +
                       _tmp483 * _tmp601 + _tmp484 * _tmp602 + _tmp771;
    _hessian(23, 16) = _tmp480 * _tmp630 + _tmp481 * _tmp631 + _tmp482 * _tmp632 +
                       _tmp483 * _tmp633 + _tmp484 * _tmp634 + _tmp772;
    _hessian(24, 16) = _tmp480 * _tmp636 + _tmp481 * _tmp637 + _tmp482 * _tmp638 +
                       _tmp483 * _tmp639 + _tmp484 * _tmp640 + _tmp787;
    _hessian(25, 16) = _tmp480 * _tmp642 + _tmp481 * _tmp643 + _tmp482 * _tmp644 +
                       _tmp483 * _tmp645 + _tmp484 * _tmp646 - _tmp773;
    _hessian(26, 16) = _tmp480 * _tmp648 + _tmp481 * _tmp649 + _tmp482 * _tmp650 +
                       _tmp483 * _tmp651 + _tmp484 * _tmp652 + _tmp789;
    _hessian(0, 17) = 0;
    _hessian(1, 17) = 0;
    _hessian(2, 17) = 0;
    _hessian(3, 17) = 0;
    _hessian(4, 17) = 0;
    _hessian(5, 17) = 0;
    _hessian(6, 17) = 0;
    _hessian(7, 17) = 0;
    _hessian(8, 17) = 0;
    _hessian(9, 17) = 0;
    _hessian(10, 17) = 0;
    _hessian(11, 17) = 0;
    _hessian(12, 17) = 0;
    _hessian(13, 17) = 0;
    _hessian(14, 17) = 0;
    _hessian(15, 17) = 0;
    _hessian(16, 17) = 0;
    _hessian(17, 17) = std::pow(_tmp485, Scalar(2)) + std::pow(_tmp486, Scalar(2)) +
                       std::pow(_tmp487, Scalar(2)) + std::pow(_tmp488, Scalar(2)) +
                       std::pow(_tmp489, Scalar(2)) + _tmp775;
    _hessian(18, 17) = _tmp485 * _tmp491 + _tmp486 * _tmp492 + _tmp487 * _tmp493 +
                       _tmp488 * _tmp494 + _tmp489 * _tmp495 - _tmp779;
    _hessian(19, 17) = _tmp485 * _tmp497 + _tmp486 * _tmp498 + _tmp487 * _tmp499 +
                       _tmp488 * _tmp500 + _tmp489 * _tmp501 - _tmp781;
    _hessian(20, 17) = _tmp485 * _tmp503 + _tmp486 * _tmp504 + _tmp487 * _tmp505 +
                       _tmp488 * _tmp506 + _tmp489 * _tmp507 - _tmp782;
    _hessian(21, 17) = _tmp485 * _tmp566 + _tmp486 * _tmp567 + _tmp487 * _tmp568 +
                       _tmp488 * _tmp569 + _tmp489 * _tmp570 + _tmp783;
    _hessian(22, 17) = _tmp485 * _tmp598 + _tmp486 * _tmp599 + _tmp487 * _tmp600 +
                       _tmp488 * _tmp601 + _tmp489 * _tmp602 + _tmp784;
    _hessian(23, 17) = _tmp485 * _tmp630 + _tmp486 * _tmp631 + _tmp487 * _tmp632 +
                       _tmp488 * _tmp633 + _tmp489 * _tmp634 + _tmp785;
    _hessian(24, 17) = _tmp485 * _tmp636 + _tmp486 * _tmp637 + _tmp487 * _tmp638 +
                       _tmp488 * _tmp639 + _tmp489 * _tmp640 + _tmp788;
    _hessian(25, 17) = _tmp485 * _tmp642 + _tmp486 * _tmp643 + _tmp487 * _tmp644 +
                       _tmp488 * _tmp645 + _tmp489 * _tmp646 + _tmp789;
    _hessian(26, 17) = _tmp485 * _tmp648 + _tmp486 * _tmp649 + _tmp487 * _tmp650 +
                       _tmp488 * _tmp651 + _tmp489 * _tmp652 - _tmp786;
    _hessian(0, 18) = 0;
    _hessian(1, 18) = 0;
    _hessian(2, 18) = 0;
    _hessian(3, 18) = 0;
    _hessian(4, 18) = 0;
    _hessian(5, 18) = 0;
    _hessian(6, 18) = 0;
    _hessian(7, 18) = 0;
    _hessian(8, 18) = 0;
    _hessian(9, 18) = 0;
    _hessian(10, 18) = 0;
    _hessian(11, 18) = 0;
    _hessian(12, 18) = 0;
    _hessian(13, 18) = 0;
    _hessian(14, 18) = 0;
    _hessian(15, 18) = 0;
    _hessian(16, 18) = 0;
    _hessian(17, 18) = 0;
    _hessian(18, 18) = std::pow(Dv_D_accel_bias(0, 0), Scalar(2)) * _tmp740 +
                       std::pow(_tmp491, Scalar(2)) + std::pow(_tmp492, Scalar(2)) +
                       std::pow(_tmp493, Scalar(2)) + std::pow(_tmp494, Scalar(2)) +
                       std::pow(_tmp495, Scalar(2));
    _hessian(19, 18) = Dv_D_accel_bias(0, 1) * _tmp750 + _tmp491 * _tmp497 + _tmp492 * _tmp498 +
                       _tmp493 * _tmp499 + _tmp494 * _tmp500 + _tmp495 * _tmp501;
    _hessian(20, 18) = Dv_D_accel_bias(0, 2) * _tmp750 + _tmp491 * _tmp503 + _tmp492 * _tmp504 +
                       _tmp493 * _tmp505 + _tmp494 * _tmp506 + _tmp495 * _tmp507;
    _hessian(21, 18) = -_tmp490 * _tmp564 + _tmp491 * _tmp566 + _tmp492 * _tmp567 +
                       _tmp493 * _tmp568 + _tmp494 * _tmp569 + _tmp495 * _tmp570;
    _hessian(22, 18) = -_tmp490 * _tmp597 + _tmp491 * _tmp598 + _tmp492 * _tmp599 +
                       _tmp493 * _tmp600 + _tmp494 * _tmp601 + _tmp495 * _tmp602;
    _hessian(23, 18) = -_tmp490 * _tmp629 + _tmp491 * _tmp630 + _tmp492 * _tmp631 +
                       _tmp493 * _tmp632 + _tmp494 * _tmp633 + _tmp495 * _tmp634;
    _hessian(24, 18) = _tmp491 * _tmp636 + _tmp492 * _tmp637 + _tmp493 * _tmp638 +
                       _tmp494 * _tmp639 + _tmp495 * _tmp640 + _tmp751 * dt;
    _hessian(25, 18) = _tmp491 * _tmp642 + _tmp492 * _tmp643 + _tmp493 * _tmp644 +
                       _tmp494 * _tmp645 + _tmp495 * _tmp646 + _tmp767 * dt;
    _hessian(26, 18) = _tmp491 * _tmp648 + _tmp492 * _tmp649 + _tmp493 * _tmp650 +
                       _tmp494 * _tmp651 + _tmp495 * _tmp652 + _tmp779 * dt;
    _hessian(0, 19) = 0;
    _hessian(1, 19) = 0;
    _hessian(2, 19) = 0;
    _hessian(3, 19) = 0;
    _hessian(4, 19) = 0;
    _hessian(5, 19) = 0;
    _hessian(6, 19) = 0;
    _hessian(7, 19) = 0;
    _hessian(8, 19) = 0;
    _hessian(9, 19) = 0;
    _hessian(10, 19) = 0;
    _hessian(11, 19) = 0;
    _hessian(12, 19) = 0;
    _hessian(13, 19) = 0;
    _hessian(14, 19) = 0;
    _hessian(15, 19) = 0;
    _hessian(16, 19) = 0;
    _hessian(17, 19) = 0;
    _hessian(18, 19) = 0;
    _hessian(19, 19) = std::pow(Dv_D_accel_bias(0, 1), Scalar(2)) * _tmp740 +
                       std::pow(_tmp497, Scalar(2)) + std::pow(_tmp498, Scalar(2)) +
                       std::pow(_tmp499, Scalar(2)) + std::pow(_tmp500, Scalar(2)) +
                       std::pow(_tmp501, Scalar(2));
    _hessian(20, 19) = Dv_D_accel_bias(0, 1) * Dv_D_accel_bias(0, 2) * _tmp740 + _tmp497 * _tmp503 +
                       _tmp498 * _tmp504 + _tmp499 * _tmp505 + _tmp500 * _tmp506 +
                       _tmp501 * _tmp507;
    _hessian(21, 19) = -_tmp496 * _tmp564 + _tmp497 * _tmp566 + _tmp498 * _tmp567 +
                       _tmp499 * _tmp568 + _tmp500 * _tmp569 + _tmp501 * _tmp570;
    _hessian(22, 19) = -_tmp496 * _tmp597 + _tmp497 * _tmp598 + _tmp498 * _tmp599 +
                       _tmp499 * _tmp600 + _tmp500 * _tmp601 + _tmp501 * _tmp602;
    _hessian(23, 19) = -_tmp496 * _tmp629 + _tmp497 * _tmp630 + _tmp498 * _tmp631 +
                       _tmp499 * _tmp632 + _tmp500 * _tmp633 + _tmp501 * _tmp634;
    _hessian(24, 19) = _tmp497 * _tmp636 + _tmp498 * _tmp637 + _tmp499 * _tmp638 +
                       _tmp500 * _tmp639 + _tmp501 * _tmp640 + _tmp753 * dt;
    _hessian(25, 19) = _tmp497 * _tmp642 + _tmp498 * _tmp643 + _tmp499 * _tmp644 +
                       _tmp500 * _tmp645 + _tmp501 * _tmp646 + _tmp768 * dt;
    _hessian(26, 19) = _tmp497 * _tmp648 + _tmp498 * _tmp649 + _tmp499 * _tmp650 +
                       _tmp500 * _tmp651 + _tmp501 * _tmp652 + _tmp781 * dt;
    _hessian(0, 20) = 0;
    _hessian(1, 20) = 0;
    _hessian(2, 20) = 0;
    _hessian(3, 20) = 0;
    _hessian(4, 20) = 0;
    _hessian(5, 20) = 0;
    _hessian(6, 20) = 0;
    _hessian(7, 20) = 0;
    _hessian(8, 20) = 0;
    _hessian(9, 20) = 0;
    _hessian(10, 20) = 0;
    _hessian(11, 20) = 0;
    _hessian(12, 20) = 0;
    _hessian(13, 20) = 0;
    _hessian(14, 20) = 0;
    _hessian(15, 20) = 0;
    _hessian(16, 20) = 0;
    _hessian(17, 20) = 0;
    _hessian(18, 20) = 0;
    _hessian(19, 20) = 0;
    _hessian(20, 20) = std::pow(Dv_D_accel_bias(0, 2), Scalar(2)) * _tmp740 +
                       std::pow(_tmp503, Scalar(2)) + std::pow(_tmp504, Scalar(2)) +
                       std::pow(_tmp505, Scalar(2)) + std::pow(_tmp506, Scalar(2)) +
                       std::pow(_tmp507, Scalar(2));
    _hessian(21, 20) = -_tmp502 * _tmp564 + _tmp503 * _tmp566 + _tmp504 * _tmp567 +
                       _tmp505 * _tmp568 + _tmp506 * _tmp569 + _tmp507 * _tmp570;
    _hessian(22, 20) = -_tmp502 * _tmp597 + _tmp503 * _tmp598 + _tmp504 * _tmp599 +
                       _tmp505 * _tmp600 + _tmp506 * _tmp601 + _tmp507 * _tmp602;
    _hessian(23, 20) = -_tmp502 * _tmp629 + _tmp503 * _tmp630 + _tmp504 * _tmp631 +
                       _tmp505 * _tmp632 + _tmp506 * _tmp633 + _tmp507 * _tmp634;
    _hessian(24, 20) = _tmp503 * _tmp636 + _tmp504 * _tmp637 + _tmp505 * _tmp638 +
                       _tmp506 * _tmp639 + _tmp507 * _tmp640 + _tmp754 * dt;
    _hessian(25, 20) = _tmp503 * _tmp642 + _tmp504 * _tmp643 + _tmp505 * _tmp644 +
                       _tmp506 * _tmp645 + _tmp507 * _tmp646 + _tmp769 * dt;
    _hessian(26, 20) = _tmp503 * _tmp648 + _tmp504 * _tmp649 + _tmp505 * _tmp650 +
                       _tmp506 * _tmp651 + _tmp507 * _tmp652 + _tmp782 * dt;
    _hessian(0, 21) = 0;
    _hessian(1, 21) = 0;
    _hessian(2, 21) = 0;
    _hessian(3, 21) = 0;
    _hessian(4, 21) = 0;
    _hessian(5, 21) = 0;
    _hessian(6, 21) = 0;
    _hessian(7, 21) = 0;
    _hessian(8, 21) = 0;
    _hessian(9, 21) = 0;
    _hessian(10, 21) = 0;
    _hessian(11, 21) = 0;
    _hessian(12, 21) = 0;
    _hessian(13, 21) = 0;
    _hessian(14, 21) = 0;
    _hessian(15, 21) = 0;
    _hessian(16, 21) = 0;
    _hessian(17, 21) = 0;
    _hessian(18, 21) = 0;
    _hessian(19, 21) = 0;
    _hessian(20, 21) = 0;
    _hessian(21, 21) =
        std::pow(_tmp556, Scalar(2)) + std::pow(_tmp560, Scalar(2)) + std::pow(_tmp562, Scalar(2)) +
        std::pow(_tmp564, Scalar(2)) + std::pow(_tmp566, Scalar(2)) + std::pow(_tmp567, Scalar(2)) +
        std::pow(_tmp568, Scalar(2)) + std::pow(_tmp569, Scalar(2)) + std::pow(_tmp570, Scalar(2));
    _hessian(22, 21) = _tmp556 * _tmp587 + _tmp560 * _tmp593 + _tmp562 * _tmp596 +
                       _tmp564 * _tmp597 + _tmp566 * _tmp598 + _tmp567 * _tmp599 +
                       _tmp568 * _tmp600 + _tmp569 * _tmp601 + _tmp570 * _tmp602;
    _hessian(23, 21) = _tmp556 * _tmp621 + _tmp560 * _tmp625 + _tmp562 * _tmp627 +
                       _tmp564 * _tmp629 + _tmp566 * _tmp630 + _tmp567 * _tmp631 +
                       _tmp568 * _tmp632 + _tmp569 * _tmp633 + _tmp570 * _tmp634;
    _hessian(24, 21) = _tmp566 * _tmp636 + _tmp567 * _tmp637 + _tmp568 * _tmp638 +
                       _tmp569 * _tmp639 + _tmp570 * _tmp640 - _tmp755 * dt;
    _hessian(25, 21) = _tmp566 * _tmp642 + _tmp567 * _tmp643 + _tmp568 * _tmp644 +
                       _tmp569 * _tmp645 + _tmp570 * _tmp646 - _tmp770 * dt;
    _hessian(26, 21) = _tmp566 * _tmp648 + _tmp567 * _tmp649 + _tmp568 * _tmp650 +
                       _tmp569 * _tmp651 + _tmp570 * _tmp652 - _tmp783 * dt;
    _hessian(0, 22) = 0;
    _hessian(1, 22) = 0;
    _hessian(2, 22) = 0;
    _hessian(3, 22) = 0;
    _hessian(4, 22) = 0;
    _hessian(5, 22) = 0;
    _hessian(6, 22) = 0;
    _hessian(7, 22) = 0;
    _hessian(8, 22) = 0;
    _hessian(9, 22) = 0;
    _hessian(10, 22) = 0;
    _hessian(11, 22) = 0;
    _hessian(12, 22) = 0;
    _hessian(13, 22) = 0;
    _hessian(14, 22) = 0;
    _hessian(15, 22) = 0;
    _hessian(16, 22) = 0;
    _hessian(17, 22) = 0;
    _hessian(18, 22) = 0;
    _hessian(19, 22) = 0;
    _hessian(20, 22) = 0;
    _hessian(21, 22) = 0;
    _hessian(22, 22) =
        std::pow(_tmp587, Scalar(2)) + std::pow(_tmp593, Scalar(2)) + std::pow(_tmp596, Scalar(2)) +
        std::pow(_tmp597, Scalar(2)) + std::pow(_tmp598, Scalar(2)) + std::pow(_tmp599, Scalar(2)) +
        std::pow(_tmp600, Scalar(2)) + std::pow(_tmp601, Scalar(2)) + std::pow(_tmp602, Scalar(2));
    _hessian(23, 22) = _tmp587 * _tmp621 + _tmp593 * _tmp625 + _tmp596 * _tmp627 +
                       _tmp597 * _tmp629 + _tmp598 * _tmp630 + _tmp599 * _tmp631 +
                       _tmp600 * _tmp632 + _tmp601 * _tmp633 + _tmp602 * _tmp634;
    _hessian(24, 22) = -_tmp597 * _tmp635 + _tmp598 * _tmp636 + _tmp599 * _tmp637 +
                       _tmp600 * _tmp638 + _tmp601 * _tmp639 + _tmp602 * _tmp640;
    _hessian(25, 22) = -_tmp597 * _tmp641 + _tmp598 * _tmp642 + _tmp599 * _tmp643 +
                       _tmp600 * _tmp644 + _tmp601 * _tmp645 + _tmp602 * _tmp646;
    _hessian(26, 22) = -_tmp597 * _tmp647 + _tmp598 * _tmp648 + _tmp599 * _tmp649 +
                       _tmp600 * _tmp650 + _tmp601 * _tmp651 + _tmp602 * _tmp652;
    _hessian(0, 23) = 0;
    _hessian(1, 23) = 0;
    _hessian(2, 23) = 0;
    _hessian(3, 23) = 0;
    _hessian(4, 23) = 0;
    _hessian(5, 23) = 0;
    _hessian(6, 23) = 0;
    _hessian(7, 23) = 0;
    _hessian(8, 23) = 0;
    _hessian(9, 23) = 0;
    _hessian(10, 23) = 0;
    _hessian(11, 23) = 0;
    _hessian(12, 23) = 0;
    _hessian(13, 23) = 0;
    _hessian(14, 23) = 0;
    _hessian(15, 23) = 0;
    _hessian(16, 23) = 0;
    _hessian(17, 23) = 0;
    _hessian(18, 23) = 0;
    _hessian(19, 23) = 0;
    _hessian(20, 23) = 0;
    _hessian(21, 23) = 0;
    _hessian(22, 23) = 0;
    _hessian(23, 23) =
        std::pow(_tmp621, Scalar(2)) + std::pow(_tmp625, Scalar(2)) + std::pow(_tmp627, Scalar(2)) +
        std::pow(_tmp629, Scalar(2)) + std::pow(_tmp630, Scalar(2)) + std::pow(_tmp631, Scalar(2)) +
        std::pow(_tmp632, Scalar(2)) + std::pow(_tmp633, Scalar(2)) + std::pow(_tmp634, Scalar(2));
    _hessian(24, 23) = _tmp630 * _tmp636 + _tmp631 * _tmp637 + _tmp632 * _tmp638 +
                       _tmp633 * _tmp639 + _tmp634 * _tmp640 - _tmp757 * dt;
    _hessian(25, 23) = _tmp630 * _tmp642 + _tmp631 * _tmp643 + _tmp632 * _tmp644 +
                       _tmp633 * _tmp645 + _tmp634 * _tmp646 - _tmp772 * dt;
    _hessian(26, 23) = _tmp630 * _tmp648 + _tmp631 * _tmp649 + _tmp632 * _tmp650 +
                       _tmp633 * _tmp651 + _tmp634 * _tmp652 - _tmp785 * dt;
    _hessian(0, 24) = 0;
    _hessian(1, 24) = 0;
    _hessian(2, 24) = 0;
    _hessian(3, 24) = 0;
    _hessian(4, 24) = 0;
    _hessian(5, 24) = 0;
    _hessian(6, 24) = 0;
    _hessian(7, 24) = 0;
    _hessian(8, 24) = 0;
    _hessian(9, 24) = 0;
    _hessian(10, 24) = 0;
    _hessian(11, 24) = 0;
    _hessian(12, 24) = 0;
    _hessian(13, 24) = 0;
    _hessian(14, 24) = 0;
    _hessian(15, 24) = 0;
    _hessian(16, 24) = 0;
    _hessian(17, 24) = 0;
    _hessian(18, 24) = 0;
    _hessian(19, 24) = 0;
    _hessian(20, 24) = 0;
    _hessian(21, 24) = 0;
    _hessian(22, 24) = 0;
    _hessian(23, 24) = 0;
    _hessian(24, 24) = _tmp119 * _tmp741 + std::pow(_tmp636, Scalar(2)) +
                       std::pow(_tmp637, Scalar(2)) + std::pow(_tmp638, Scalar(2)) +
                       std::pow(_tmp639, Scalar(2)) + std::pow(_tmp640, Scalar(2));
    _hessian(25, 24) = _tmp119 * _tmp743 + _tmp636 * _tmp642 + _tmp637 * _tmp643 +
                       _tmp638 * _tmp644 + _tmp639 * _tmp645 + _tmp640 * _tmp646;
    _hessian(26, 24) = _tmp119 * _tmp744 + _tmp636 * _tmp648 + _tmp637 * _tmp649 +
                       _tmp638 * _tmp650 + _tmp639 * _tmp651 + _tmp640 * _tmp652;
    _hessian(0, 25) = 0;
    _hessian(1, 25) = 0;
    _hessian(2, 25) = 0;
    _hessian(3, 25) = 0;
    _hessian(4, 25) = 0;
    _hessian(5, 25) = 0;
    _hessian(6, 25) = 0;
    _hessian(7, 25) = 0;
    _hessian(8, 25) = 0;
    _hessian(9, 25) = 0;
    _hessian(10, 25) = 0;
    _hessian(11, 25) = 0;
    _hessian(12, 25) = 0;
    _hessian(13, 25) = 0;
    _hessian(14, 25) = 0;
    _hessian(15, 25) = 0;
    _hessian(16, 25) = 0;
    _hessian(17, 25) = 0;
    _hessian(18, 25) = 0;
    _hessian(19, 25) = 0;
    _hessian(20, 25) = 0;
    _hessian(21, 25) = 0;
    _hessian(22, 25) = 0;
    _hessian(23, 25) = 0;
    _hessian(24, 25) = 0;
    _hessian(25, 25) = _tmp119 * _tmp761 + std::pow(_tmp642, Scalar(2)) +
                       std::pow(_tmp643, Scalar(2)) + std::pow(_tmp644, Scalar(2)) +
                       std::pow(_tmp645, Scalar(2)) + std::pow(_tmp646, Scalar(2));
    _hessian(26, 25) = _tmp119 * _tmp762 + _tmp642 * _tmp648 + _tmp643 * _tmp649 +
                       _tmp644 * _tmp650 + _tmp645 * _tmp651 + _tmp646 * _tmp652;
    _hessian(0, 26) = 0;
    _hessian(1, 26) = 0;
    _hessian(2, 26) = 0;
    _hessian(3, 26) = 0;
    _hessian(4, 26) = 0;
    _hessian(5, 26) = 0;
    _hessian(6, 26) = 0;
    _hessian(7, 26) = 0;
    _hessian(8, 26) = 0;
    _hessian(9, 26) = 0;
    _hessian(10, 26) = 0;
    _hessian(11, 26) = 0;
    _hessian(12, 26) = 0;
    _hessian(13, 26) = 0;
    _hessian(14, 26) = 0;
    _hessian(15, 26) = 0;
    _hessian(16, 26) = 0;
    _hessian(17, 26) = 0;
    _hessian(18, 26) = 0;
    _hessian(19, 26) = 0;
    _hessian(20, 26) = 0;
    _hessian(21, 26) = 0;
    _hessian(22, 26) = 0;
    _hessian(23, 26) = 0;
    _hessian(24, 26) = 0;
    _hessian(25, 26) = 0;
    _hessian(26, 26) = _tmp119 * _tmp775 + std::pow(_tmp648, Scalar(2)) +
                       std::pow(_tmp649, Scalar(2)) + std::pow(_tmp650, Scalar(2)) +
                       std::pow(_tmp651, Scalar(2)) + std::pow(_tmp652, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 27, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp100 * _tmp195 + _tmp111 * _tmp206 + _tmp118 * _tmp217 + _tmp126 * _tmp221 +
                 _tmp130 * _tmp225 + _tmp132 * _tmp229 + _tmp180 * _tmp62 + _tmp185 * _tmp69 +
                 _tmp191 * _tmp77;
    _rhs(1, 0) = _tmp100 * _tmp260 + _tmp111 * _tmp261 + _tmp118 * _tmp265 + _tmp126 * _tmp267 +
                 _tmp130 * _tmp268 + _tmp132 * _tmp269 + _tmp243 * _tmp62 + _tmp248 * _tmp69 +
                 _tmp250 * _tmp77;
    _rhs(2, 0) = _tmp100 * _tmp291 + _tmp111 * _tmp296 + _tmp118 * _tmp297 + _tmp126 * _tmp299 +
                 _tmp130 * _tmp301 + _tmp132 * _tmp302 + _tmp280 * _tmp62 + _tmp285 * _tmp69 +
                 _tmp287 * _tmp77;
    _rhs(3, 0) = _tmp130 * _tmp306 + _tmp132 * _tmp310 - _tmp790;
    _rhs(4, 0) = _tmp130 * _tmp314 + _tmp132 * _tmp318 - _tmp791;
    _rhs(5, 0) = _tmp130 * _tmp322 + _tmp132 * _tmp326 - _tmp792;
    _rhs(6, 0) = _tmp111 * _tmp330 + _tmp118 * _tmp334 + _tmp126 * _tmp338 + _tmp130 * _tmp342 +
                 _tmp132 * _tmp346 - _tmp793;
    _rhs(7, 0) = _tmp111 * _tmp350 + _tmp118 * _tmp354 + _tmp126 * _tmp358 + _tmp130 * _tmp362 +
                 _tmp132 * _tmp366 - _tmp794;
    _rhs(8, 0) = _tmp111 * _tmp370 + _tmp118 * _tmp374 + _tmp126 * _tmp378 + _tmp130 * _tmp382 +
                 _tmp132 * _tmp386 - _tmp795;
    _rhs(9, 0) = _tmp100 * _tmp422 + _tmp111 * _tmp424 + _tmp118 * _tmp425 + _tmp126 * _tmp426 +
                 _tmp130 * _tmp427 + _tmp132 * _tmp428 + _tmp399 * _tmp62 + _tmp410 * _tmp69 +
                 _tmp417 * _tmp77;
    _rhs(10, 0) = _tmp100 * _tmp443 + _tmp111 * _tmp445 + _tmp118 * _tmp446 + _tmp126 * _tmp448 +
                  _tmp130 * _tmp449 + _tmp132 * _tmp450 + _tmp433 * _tmp62 + _tmp437 * _tmp69 +
                  _tmp440 * _tmp77;
    _rhs(11, 0) = _tmp100 * _tmp463 + _tmp111 * _tmp464 + _tmp118 * _tmp465 + _tmp126 * _tmp466 +
                  _tmp130 * _tmp467 + _tmp132 * _tmp468 + _tmp454 * _tmp62 + _tmp458 * _tmp69 +
                  _tmp459 * _tmp77;
    _rhs(12, 0) = _tmp130 * _tmp469 + _tmp132 * _tmp470 + _tmp790;
    _rhs(13, 0) = _tmp130 * _tmp471 + _tmp132 * _tmp472 + _tmp791;
    _rhs(14, 0) = _tmp130 * _tmp473 + _tmp132 * _tmp474 + _tmp792;
    _rhs(15, 0) = _tmp111 * _tmp475 + _tmp118 * _tmp476 + _tmp126 * _tmp477 + _tmp130 * _tmp478 +
                  _tmp132 * _tmp479 + _tmp793;
    _rhs(16, 0) = _tmp111 * _tmp480 + _tmp118 * _tmp481 + _tmp126 * _tmp482 + _tmp130 * _tmp483 +
                  _tmp132 * _tmp484 + _tmp794;
    _rhs(17, 0) = _tmp111 * _tmp485 + _tmp118 * _tmp486 + _tmp126 * _tmp487 + _tmp130 * _tmp488 +
                  _tmp132 * _tmp489 + _tmp795;
    _rhs(18, 0) = -_tmp100 * _tmp490 + _tmp111 * _tmp491 + _tmp118 * _tmp492 + _tmp126 * _tmp493 +
                  _tmp130 * _tmp494 + _tmp132 * _tmp495;
    _rhs(19, 0) = -_tmp100 * _tmp496 + _tmp111 * _tmp497 + _tmp118 * _tmp498 + _tmp126 * _tmp499 +
                  _tmp130 * _tmp500 + _tmp132 * _tmp501;
    _rhs(20, 0) = -_tmp100 * _tmp502 + _tmp111 * _tmp503 + _tmp118 * _tmp504 + _tmp126 * _tmp505 +
                  _tmp130 * _tmp506 + _tmp132 * _tmp507;
    _rhs(21, 0) = _tmp100 * _tmp564 + _tmp111 * _tmp566 + _tmp118 * _tmp567 + _tmp126 * _tmp568 +
                  _tmp130 * _tmp569 + _tmp132 * _tmp570 + _tmp556 * _tmp62 + _tmp560 * _tmp69 +
                  _tmp562 * _tmp77;
    _rhs(22, 0) = _tmp100 * _tmp597 + _tmp111 * _tmp598 + _tmp118 * _tmp599 + _tmp126 * _tmp600 +
                  _tmp130 * _tmp601 + _tmp132 * _tmp602 + _tmp587 * _tmp62 + _tmp593 * _tmp69 +
                  _tmp596 * _tmp77;
    _rhs(23, 0) = _tmp100 * _tmp629 + _tmp111 * _tmp630 + _tmp118 * _tmp631 + _tmp126 * _tmp632 +
                  _tmp130 * _tmp633 + _tmp132 * _tmp634 + _tmp62 * _tmp621 + _tmp625 * _tmp69 +
                  _tmp627 * _tmp77;
    _rhs(24, 0) = _tmp111 * _tmp636 + _tmp118 * _tmp637 + _tmp126 * _tmp638 + _tmp130 * _tmp639 +
                  _tmp132 * _tmp640 - _tmp793 * dt;
    _rhs(25, 0) = _tmp111 * _tmp642 + _tmp118 * _tmp643 + _tmp126 * _tmp644 + _tmp130 * _tmp645 +
                  _tmp132 * _tmp646 - _tmp794 * dt;
    _rhs(26, 0) = _tmp111 * _tmp648 + _tmp118 * _tmp649 + _tmp126 * _tmp650 + _tmp130 * _tmp651 +
                  _tmp132 * _tmp652 - _tmp795 * dt;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
