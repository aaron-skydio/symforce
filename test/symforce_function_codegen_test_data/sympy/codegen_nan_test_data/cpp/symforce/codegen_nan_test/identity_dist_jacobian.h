// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace codegen_nan_test {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     R1: Rot3
 *     e: Scalar
 *
 * Outputs:
 *     dist_D_R1: Scalar
 */
template <typename Scalar>
Scalar IdentityDistJacobian(const sym::Rot3<Scalar>& R1, const Scalar e) {
  // Total ops: 39

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _R1 = R1.Data();

  // Intermediate terms (13)
  const Scalar _tmp0 = std::fabs(_R1[3]);
  const Scalar _tmp1 = e - 1;
  const Scalar _tmp2 = 8 * std::pow(Scalar(std::copysign(Scalar(1.0), _R1[3])), Scalar(2)) *
                       Scalar(0.5) * ((((-_tmp0 - _tmp1) >= 0) - ((-_tmp0 - _tmp1) < 0)) + 1) *
                       (((_R1[3]) > 0) - ((_R1[3]) < 0));
  const Scalar _tmp3 = std::pow(_R1[0], Scalar(2)) * _tmp2;
  const Scalar _tmp4 = std::min<Scalar>(_tmp0, -_tmp1);
  const Scalar _tmp5 = 1 - std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = std::acos(_tmp4);
  const Scalar _tmp7 = _tmp6 / (_tmp5 * std::sqrt(_tmp5));
  const Scalar _tmp8 = std::pow(_R1[1], Scalar(2));
  const Scalar _tmp9 = _tmp2 * _tmp7;
  const Scalar _tmp10 = std::pow(_R1[2], Scalar(2));
  const Scalar _tmp11 = _tmp4 * std::pow(_tmp6, Scalar(2)) / std::pow(_tmp5, Scalar(2));
  const Scalar _tmp12 = _tmp11 * _tmp2;

  // Output terms (1)
  Scalar _dist_D_R1;

  _dist_D_R1 = _tmp10 * _tmp12 - _tmp10 * _tmp9 + _tmp11 * _tmp3 + _tmp12 * _tmp8 - _tmp3 * _tmp7 -
               _tmp8 * _tmp9;

  return _dist_D_R1;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace codegen_nan_test
